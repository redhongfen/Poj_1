{"ast":null,"code":"import { mapGetters } from 'vuex';\nexport default {\n  name: \"GoodsView\",\n  data() {\n    return {\n      // 本地数据用于存储购物车的商品信息\n      tableData: []\n    };\n  },\n  computed: {\n    ...mapGetters(['cartItems']),\n    // 从 Vuex 中获取购物车商品\n    totalPrice() {\n      // 计算总价\n      return this.cartItems.reduce((total, item) => {\n        return total + item.price * item.quantity; // 假设每个 item 有 price 和 quantity 属性\n      }, 0).toFixed(2); // 保留两位小数\n    }\n  },\n  created() {\n    this.loadCartItems(); // 在组件创建时加载购物车商品\n  },\n  methods: {\n    loadCartItems() {\n      // 将 Vuex 中的购物车商品加载到本地表格数据\n      this.tableData = this.cartItems.map(item => ({\n        id: item.id,\n        goodsName: item.goodsName,\n        price: item.price,\n        quantity: item.quantity // 这里增加了数量\n      }));\n    },\n    formatPrice(row, column, cellValue) {\n      return `${cellValue} 元`; // 格式化价格显示\n    },\n    formatRowPrice(row) {\n      // 计算并返回该行价格\n      return (row.price * row.quantity).toFixed(2) + ' 元';\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","name","data","tableData","computed","totalPrice","cartItems","reduce","total","item","price","quantity","toFixed","created","loadCartItems","methods","map","id","goodsName","formatPrice","row","column","cellValue","formatRowPrice"],"sources":["src/views/manager/GoodsView.vue"],"sourcesContent":["<template> \r\n<div class=\"\">\r\n    <div class=\"\" style=\"width: 100%; margin: 10px 0;\">\r\n        总价: {{ totalPrice }} 元\r\n    </div>\r\n\r\n    <el-table :data=\"tableData\" stripe :header-cell-style=\"{ backgroundColor: 'aliceblue', color: '#666' }\">\r\n        <el-table-column prop=\"id\" label=\"ID\" ></el-table-column>\r\n        <el-table-column prop=\"goodsName\" label=\"商品名\"></el-table-column>\r\n        <el-table-column prop=\"price\" label=\"价格\" :formatter=\"formatPrice\"></el-table-column>\r\n        <el-table-column prop=\"quantity\" label=\"数量\"></el-table-column>\r\n        <el-table-column label=\"该行价格\" :formatter=\"formatRowPrice\"></el-table-column>\r\n    </el-table>\r\n</div>\r\n</template>\r\n    \r\n<script>\r\nimport { mapGetters } from 'vuex';\r\n\r\nexport default {\r\n    name: \"GoodsView\",\r\n    data() {\r\n        return {\r\n            // 本地数据用于存储购物车的商品信息\r\n            tableData: []\r\n        };\r\n    },\r\n    computed: {\r\n        ...mapGetters(['cartItems']), // 从 Vuex 中获取购物车商品\r\n        totalPrice() {\r\n            // 计算总价\r\n            return this.cartItems.reduce((total, item) => {\r\n                return total + item.price * item.quantity; // 假设每个 item 有 price 和 quantity 属性\r\n            }, 0).toFixed(2); // 保留两位小数\r\n        }\r\n    },\r\n    created() {\r\n        this.loadCartItems(); // 在组件创建时加载购物车商品\r\n    },\r\n    methods: {\r\n        loadCartItems() {\r\n            // 将 Vuex 中的购物车商品加载到本地表格数据\r\n            this.tableData = this.cartItems.map(item => ({\r\n                id: item.id,\r\n                goodsName: item.goodsName,\r\n                price: item.price,\r\n                quantity: item.quantity // 这里增加了数量\r\n            }));\r\n        },\r\n        formatPrice(row, column, cellValue) {\r\n            return `${cellValue} 元`; // 格式化价格显示\r\n        },\r\n        formatRowPrice(row) {\r\n            // 计算并返回该行价格\r\n            return (row.price * row.quantity).toFixed(2) + ' 元';\r\n        }\r\n    }\r\n}\r\n</script>\r\n    \r\n<style scoped>\r\n/* 可以在这里添加样式 */\r\n</style>\r\n    "],"mappings":"AAiBA,SAAAA,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAJ,UAAA;IAAA;IACAK,WAAA;MACA;MACA,YAAAC,SAAA,CAAAC,MAAA,EAAAC,KAAA,EAAAC,IAAA;QACA,OAAAD,KAAA,GAAAC,IAAA,CAAAC,KAAA,GAAAD,IAAA,CAAAE,QAAA;MACA,MAAAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,aAAA;EACA;EACAC,OAAA;IACAD,cAAA;MACA;MACA,KAAAX,SAAA,QAAAG,SAAA,CAAAU,GAAA,CAAAP,IAAA;QACAQ,EAAA,EAAAR,IAAA,CAAAQ,EAAA;QACAC,SAAA,EAAAT,IAAA,CAAAS,SAAA;QACAR,KAAA,EAAAD,IAAA,CAAAC,KAAA;QACAC,QAAA,EAAAF,IAAA,CAAAE,QAAA;MACA;IACA;IACAQ,YAAAC,GAAA,EAAAC,MAAA,EAAAC,SAAA;MACA,UAAAA,SAAA;IACA;IACAC,eAAAH,GAAA;MACA;MACA,QAAAA,GAAA,CAAAV,KAAA,GAAAU,GAAA,CAAAT,QAAA,EAAAC,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}