{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogicalExpression = exports.BinaryExpression = exports.AssignmentExpression = AssignmentExpression;\nexports.AssignmentPattern = AssignmentPattern;\nexports.AwaitExpression = AwaitExpression;\nexports.BindExpression = BindExpression;\nexports.CallExpression = CallExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.Decorator = Decorator;\nexports.DoExpression = DoExpression;\nexports.EmptyStatement = EmptyStatement;\nexports.ExpressionStatement = ExpressionStatement;\nexports.Import = Import;\nexports.MemberExpression = MemberExpression;\nexports.MetaProperty = MetaProperty;\nexports.ModuleExpression = ModuleExpression;\nexports.NewExpression = NewExpression;\nexports.OptionalCallExpression = OptionalCallExpression;\nexports.OptionalMemberExpression = OptionalMemberExpression;\nexports.ParenthesizedExpression = ParenthesizedExpression;\nexports.PrivateName = PrivateName;\nexports.SequenceExpression = SequenceExpression;\nexports.Super = Super;\nexports.ThisExpression = ThisExpression;\nexports.UnaryExpression = UnaryExpression;\nexports.UpdateExpression = UpdateExpression;\nexports.V8IntrinsicIdentifier = V8IntrinsicIdentifier;\nexports.YieldExpression = YieldExpression;\nexports._shouldPrintDecoratorsBeforeExport = _shouldPrintDecoratorsBeforeExport;\nvar _t = require(\"@babel/types\");\nvar _index = require(\"../node/index.js\");\nconst {\n  isCallExpression,\n  isLiteral,\n  isMemberExpression,\n  isNewExpression,\n  isPattern\n} = _t;\nfunction UnaryExpression(node) {\n  const {\n    operator\n  } = node;\n  if (operator === \"void\" || operator === \"delete\" || operator === \"typeof\" || operator === \"throw\") {\n    this.word(operator);\n    this.space();\n  } else {\n    this.token(operator);\n  }\n  this.print(node.argument);\n}\nfunction DoExpression(node) {\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n  this.word(\"do\");\n  this.space();\n  this.print(node.body);\n}\nfunction ParenthesizedExpression(node) {\n  this.tokenChar(40);\n  const exit = this.enterDelimited();\n  this.print(node.expression);\n  exit();\n  this.rightParens(node);\n}\nfunction UpdateExpression(node) {\n  if (node.prefix) {\n    this.token(node.operator);\n    this.print(node.argument);\n  } else {\n    this.print(node.argument, true);\n    this.token(node.operator);\n  }\n}\nfunction ConditionalExpression(node) {\n  this.print(node.test);\n  this.space();\n  this.tokenChar(63);\n  this.space();\n  this.print(node.consequent);\n  this.space();\n  this.tokenChar(58);\n  this.space();\n  this.print(node.alternate);\n}\nfunction NewExpression(node, parent) {\n  this.word(\"new\");\n  this.space();\n  this.print(node.callee);\n  if (this.format.minified && node.arguments.length === 0 && !node.optional && !isCallExpression(parent, {\n    callee: node\n  }) && !isMemberExpression(parent) && !isNewExpression(parent)) {\n    return;\n  }\n  this.print(node.typeArguments);\n  this.print(node.typeParameters);\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n  this.tokenChar(40);\n  const exit = this.enterDelimited();\n  this.printList(node.arguments);\n  exit();\n  this.rightParens(node);\n}\nfunction SequenceExpression(node) {\n  this.printList(node.expressions);\n}\nfunction ThisExpression() {\n  this.word(\"this\");\n}\nfunction Super() {\n  this.word(\"super\");\n}\nfunction _shouldPrintDecoratorsBeforeExport(node) {\n  if (typeof this.format.decoratorsBeforeExport === \"boolean\") {\n    return this.format.decoratorsBeforeExport;\n  }\n  return typeof node.start === \"number\" && node.start === node.declaration.start;\n}\nfunction Decorator(node) {\n  this.tokenChar(64);\n  this.print(node.expression);\n  this.newline();\n}\nfunction OptionalMemberExpression(node) {\n  let {\n    computed\n  } = node;\n  const {\n    optional,\n    property\n  } = node;\n  this.print(node.object);\n  if (!computed && isMemberExpression(property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n  if (isLiteral(property) && typeof property.value === \"number\") {\n    computed = true;\n  }\n  if (optional) {\n    this.token(\"?.\");\n  }\n  if (computed) {\n    this.tokenChar(91);\n    this.print(property);\n    this.tokenChar(93);\n  } else {\n    if (!optional) {\n      this.tokenChar(46);\n    }\n    this.print(property);\n  }\n}\nfunction OptionalCallExpression(node) {\n  this.print(node.callee);\n  this.print(node.typeParameters);\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n  this.print(node.typeArguments);\n  this.tokenChar(40);\n  const exit = this.enterDelimited();\n  this.printList(node.arguments);\n  exit();\n  this.rightParens(node);\n}\nfunction CallExpression(node) {\n  this.print(node.callee);\n  this.print(node.typeArguments);\n  this.print(node.typeParameters);\n  this.tokenChar(40);\n  const exit = this.enterDelimited();\n  this.printList(node.arguments);\n  exit();\n  this.rightParens(node);\n}\nfunction Import() {\n  this.word(\"import\");\n}\nfunction AwaitExpression(node) {\n  this.word(\"await\");\n  if (node.argument) {\n    this.space();\n    this.printTerminatorless(node.argument);\n  }\n}\nfunction YieldExpression(node) {\n  this.word(\"yield\", true);\n  if (node.delegate) {\n    this.tokenChar(42);\n    if (node.argument) {\n      this.space();\n      this.print(node.argument);\n    }\n  } else {\n    if (node.argument) {\n      this.space();\n      this.printTerminatorless(node.argument);\n    }\n  }\n}\nfunction EmptyStatement() {\n  this.semicolon(true);\n}\nfunction ExpressionStatement(node) {\n  this.tokenContext |= _index.TokenContext.expressionStatement;\n  this.print(node.expression);\n  this.semicolon();\n}\nfunction AssignmentPattern(node) {\n  this.print(node.left);\n  if (node.left.type === \"Identifier\" || isPattern(node.left)) {\n    if (node.left.optional) this.tokenChar(63);\n    this.print(node.left.typeAnnotation);\n  }\n  this.space();\n  this.tokenChar(61);\n  this.space();\n  this.print(node.right);\n}\nfunction AssignmentExpression(node) {\n  this.print(node.left);\n  this.space();\n  if (node.operator === \"in\" || node.operator === \"instanceof\") {\n    this.word(node.operator);\n  } else {\n    this.token(node.operator);\n    this._endsWithDiv = node.operator === \"/\";\n  }\n  this.space();\n  this.print(node.right);\n}\nfunction BindExpression(node) {\n  this.print(node.object);\n  this.token(\"::\");\n  this.print(node.callee);\n}\nfunction MemberExpression(node) {\n  this.print(node.object);\n  if (!node.computed && isMemberExpression(node.property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n  let computed = node.computed;\n  if (isLiteral(node.property) && typeof node.property.value === \"number\") {\n    computed = true;\n  }\n  if (computed) {\n    const exit = this.enterDelimited();\n    this.tokenChar(91);\n    this.print(node.property);\n    this.tokenChar(93);\n    exit();\n  } else {\n    this.tokenChar(46);\n    this.print(node.property);\n  }\n}\nfunction MetaProperty(node) {\n  this.print(node.meta);\n  this.tokenChar(46);\n  this.print(node.property);\n}\nfunction PrivateName(node) {\n  this.tokenChar(35);\n  this.print(node.id);\n}\nfunction V8IntrinsicIdentifier(node) {\n  this.tokenChar(37);\n  this.word(node.name);\n}\nfunction ModuleExpression(node) {\n  this.word(\"module\", true);\n  this.space();\n  this.tokenChar(123);\n  this.indent();\n  const {\n    body\n  } = node;\n  if (body.body.length || body.directives.length) {\n    this.newline();\n  }\n  this.print(body);\n  this.dedent();\n  this.rightBrace(node);\n}","map":{"version":3,"names":["_t","require","_index","isCallExpression","isLiteral","isMemberExpression","isNewExpression","isPattern","UnaryExpression","node","operator","word","space","token","print","argument","DoExpression","async","body","ParenthesizedExpression","tokenChar","exit","enterDelimited","expression","rightParens","UpdateExpression","prefix","ConditionalExpression","test","consequent","alternate","NewExpression","parent","callee","format","minified","arguments","length","optional","typeArguments","typeParameters","printList","SequenceExpression","expressions","ThisExpression","Super","_shouldPrintDecoratorsBeforeExport","decoratorsBeforeExport","start","declaration","Decorator","newline","OptionalMemberExpression","computed","property","object","TypeError","value","OptionalCallExpression","CallExpression","Import","AwaitExpression","printTerminatorless","YieldExpression","delegate","EmptyStatement","semicolon","ExpressionStatement","tokenContext","TokenContext","expressionStatement","AssignmentPattern","left","type","typeAnnotation","right","AssignmentExpression","_endsWithDiv","BindExpression","MemberExpression","MetaProperty","meta","PrivateName","id","V8IntrinsicIdentifier","name","ModuleExpression","indent","directives","dedent","rightBrace"],"sources":["../../src/generators/expressions.ts"],"sourcesContent":["import type Printer from \"../printer.ts\";\nimport {\n  isCallExpression,\n  isLiteral,\n  isMemberExpression,\n  isNewExpression,\n  isPattern,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport { TokenContext } from \"../node/index.ts\";\n\nexport function UnaryExpression(this: Printer, node: t.UnaryExpression) {\n  const { operator } = node;\n  if (\n    operator === \"void\" ||\n    operator === \"delete\" ||\n    operator === \"typeof\" ||\n    // throwExpressions\n    operator === \"throw\"\n  ) {\n    this.word(operator);\n    this.space();\n  } else {\n    this.token(operator);\n  }\n\n  this.print(node.argument);\n}\n\nexport function DoExpression(this: Printer, node: t.DoExpression) {\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n  this.word(\"do\");\n  this.space();\n  this.print(node.body);\n}\n\nexport function ParenthesizedExpression(\n  this: Printer,\n  node: t.ParenthesizedExpression,\n) {\n  this.token(\"(\");\n  const exit = this.enterDelimited();\n  this.print(node.expression);\n  exit();\n  this.rightParens(node);\n}\n\nexport function UpdateExpression(this: Printer, node: t.UpdateExpression) {\n  if (node.prefix) {\n    this.token(node.operator);\n    this.print(node.argument);\n  } else {\n    this.print(node.argument, true);\n    this.token(node.operator);\n  }\n}\n\nexport function ConditionalExpression(\n  this: Printer,\n  node: t.ConditionalExpression,\n) {\n  this.print(node.test);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.consequent);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.alternate);\n}\n\nexport function NewExpression(\n  this: Printer,\n  node: t.NewExpression,\n  parent: t.Node,\n) {\n  this.word(\"new\");\n  this.space();\n  this.print(node.callee);\n  if (\n    this.format.minified &&\n    node.arguments.length === 0 &&\n    // @ts-ignore(Babel 7 vs Babel 8) Removed in Babel 8\n    !node.optional &&\n    !isCallExpression(parent, { callee: node }) &&\n    !isMemberExpression(parent) &&\n    !isNewExpression(parent)\n  ) {\n    return;\n  }\n\n  this.print(node.typeArguments); // Flow\n  this.print(node.typeParameters); // TS\n\n  // @ts-ignore(Babel 7 vs Babel 8) Removed in Babel 8\n  if (node.optional) {\n    // TODO: This can never happen\n    this.token(\"?.\");\n  }\n  this.token(\"(\");\n  const exit = this.enterDelimited();\n  this.printList(node.arguments);\n  exit();\n  this.rightParens(node);\n}\n\nexport function SequenceExpression(this: Printer, node: t.SequenceExpression) {\n  this.printList(node.expressions);\n}\n\nexport function ThisExpression(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function Super(this: Printer) {\n  this.word(\"super\");\n}\n\nexport function _shouldPrintDecoratorsBeforeExport(\n  this: Printer,\n  node: t.ExportDeclaration & { declaration: t.ClassDeclaration },\n) {\n  if (typeof this.format.decoratorsBeforeExport === \"boolean\") {\n    return this.format.decoratorsBeforeExport;\n  }\n  return (\n    typeof node.start === \"number\" && node.start === node.declaration.start\n  );\n}\n\nexport function Decorator(this: Printer, node: t.Decorator) {\n  this.token(\"@\");\n  this.print(node.expression);\n  this.newline();\n}\n\nexport function OptionalMemberExpression(\n  this: Printer,\n  node: t.OptionalMemberExpression,\n) {\n  let { computed } = node;\n  const { optional, property } = node;\n\n  this.print(node.object);\n\n  if (!computed && isMemberExpression(property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  // @ts-expect-error todo(flow->ts) maybe instead of typeof check specific literal types?\n  if (isLiteral(property) && typeof property.value === \"number\") {\n    computed = true;\n  }\n  if (optional) {\n    this.token(\"?.\");\n  }\n\n  if (computed) {\n    this.token(\"[\");\n    this.print(property);\n    this.token(\"]\");\n  } else {\n    if (!optional) {\n      this.token(\".\");\n    }\n    this.print(property);\n  }\n}\n\nexport function OptionalCallExpression(\n  this: Printer,\n  node: t.OptionalCallExpression,\n) {\n  this.print(node.callee);\n\n  this.print(node.typeParameters); // TS\n\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  this.print(node.typeArguments); // Flow\n\n  this.token(\"(\");\n  const exit = this.enterDelimited();\n  this.printList(node.arguments);\n  exit();\n  this.rightParens(node);\n}\n\nexport function CallExpression(this: Printer, node: t.CallExpression) {\n  this.print(node.callee);\n\n  this.print(node.typeArguments); // Flow\n  this.print(node.typeParameters); // TS\n  this.token(\"(\");\n  const exit = this.enterDelimited();\n  this.printList(node.arguments);\n  exit();\n  this.rightParens(node);\n}\n\nexport function Import(this: Printer) {\n  this.word(\"import\");\n}\n\nexport function AwaitExpression(this: Printer, node: t.AwaitExpression) {\n  this.word(\"await\");\n\n  if (node.argument) {\n    this.space();\n    this.printTerminatorless(node.argument);\n  }\n}\n\nexport function YieldExpression(this: Printer, node: t.YieldExpression) {\n  this.word(\"yield\", true);\n\n  if (node.delegate) {\n    this.token(\"*\");\n    if (node.argument) {\n      this.space();\n      // line terminators are allowed after yield*\n      this.print(node.argument);\n    }\n  } else {\n    if (node.argument) {\n      this.space();\n      this.printTerminatorless(node.argument);\n    }\n  }\n}\n\nexport function EmptyStatement(this: Printer) {\n  this.semicolon(true /* force */);\n}\n\nexport function ExpressionStatement(\n  this: Printer,\n  node: t.ExpressionStatement,\n) {\n  this.tokenContext |= TokenContext.expressionStatement;\n  this.print(node.expression);\n  this.semicolon();\n}\n\nexport function AssignmentPattern(this: Printer, node: t.AssignmentPattern) {\n  this.print(node.left);\n  if (node.left.type === \"Identifier\" || isPattern(node.left)) {\n    if (node.left.optional) this.token(\"?\");\n    this.print(node.left.typeAnnotation);\n  }\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right);\n}\n\nexport function AssignmentExpression(\n  this: Printer,\n  node: t.AssignmentExpression | t.BinaryExpression | t.LogicalExpression,\n) {\n  this.print(node.left);\n\n  this.space();\n  if (node.operator === \"in\" || node.operator === \"instanceof\") {\n    this.word(node.operator);\n  } else {\n    this.token(node.operator);\n    this._endsWithDiv = node.operator === \"/\";\n  }\n  this.space();\n\n  this.print(node.right);\n}\n\nexport function BindExpression(this: Printer, node: t.BindExpression) {\n  this.print(node.object);\n  this.token(\"::\");\n  this.print(node.callee);\n}\n\nexport {\n  AssignmentExpression as BinaryExpression,\n  AssignmentExpression as LogicalExpression,\n};\n\nexport function MemberExpression(this: Printer, node: t.MemberExpression) {\n  this.print(node.object);\n\n  if (!node.computed && isMemberExpression(node.property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  let computed = node.computed;\n  // @ts-expect-error todo(flow->ts) maybe use specific literal types\n  if (isLiteral(node.property) && typeof node.property.value === \"number\") {\n    computed = true;\n  }\n\n  if (computed) {\n    const exit = this.enterDelimited();\n    this.token(\"[\");\n    this.print(node.property);\n    this.token(\"]\");\n    exit();\n  } else {\n    this.token(\".\");\n    this.print(node.property);\n  }\n}\n\nexport function MetaProperty(this: Printer, node: t.MetaProperty) {\n  this.print(node.meta);\n  this.token(\".\");\n  this.print(node.property);\n}\n\nexport function PrivateName(this: Printer, node: t.PrivateName) {\n  this.token(\"#\");\n  this.print(node.id);\n}\n\nexport function V8IntrinsicIdentifier(\n  this: Printer,\n  node: t.V8IntrinsicIdentifier,\n) {\n  this.token(\"%\");\n  this.word(node.name);\n}\n\nexport function ModuleExpression(this: Printer, node: t.ModuleExpression) {\n  this.word(\"module\", true);\n  this.space();\n  this.token(\"{\");\n  this.indent();\n  const { body } = node;\n  if (body.body.length || body.directives.length) {\n    this.newline();\n  }\n  this.print(body);\n  this.dedent();\n  this.rightBrace(node);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}