{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport HomeView from '../views/manager/HomeView.vue'; // 确保路径正确\nimport LoginView from '@/views/LoginView.vue';\nimport RegisterView from '@/views/RegisterView.vue';\nimport ManagerView from '@/views/ManagerView.vue';\nimport UserView from '@/views/manager/UserView.vue';\nimport AuthView from '@/views/manager/AuthView.vue';\nimport NullView from '@/views/404View.vue';\nimport PresonView from '@/views/manager/PresonView.vue';\nVue.use(VueRouter);\nconst routes = [{\n  path: '/',\n  name: 'Manager',\n  component: ManagerView,\n  redirect: 'home',\n  children: [{\n    path: 'home',\n    name: 'HomeView',\n    component: HomeView\n  }, {\n    path: 'user',\n    name: 'UserView',\n    component: UserView\n  }, {\n    path: '403',\n    name: 'AuthView',\n    component: AuthView\n  }, {\n    path: 'preson',\n    name: 'PresonView',\n    component: PresonView\n  }]\n}, {\n  path: '/login',\n  name: 'LoginView',\n  component: LoginView\n}, {\n  path: '/register',\n  name: 'RegisterView',\n  component: RegisterView\n}, {\n  path: '*',\n  name: '404',\n  component: NullView\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  let adminPaths = ['/user'];\n  let user = JSON.parse(localStorage.getItem('honey-user') || '{}');\n  if (user.role !== '管理员' && adminPaths.includes(to.path)) {\n    // 如果当前登录的用户不是管理员，然后当前的到达的路径是管理员才有权限访问的路径，那这个时候我就让用户去到一个没有权限的页面，不让他访问实际的页面\n    next('/403');\n  } else {\n    next();\n  }\n});\nconst originalPush = VueRouter.prototype.push;\nVueRouter.prototype.push = function push(location) {\n  return originalPush.call(this, location).catch(err => err);\n};\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","HomeView","LoginView","RegisterView","ManagerView","UserView","AuthView","NullView","PresonView","use","routes","path","name","component","redirect","children","router","mode","base","process","env","BASE_URL","beforeEach","to","from","next","adminPaths","user","JSON","parse","localStorage","getItem","role","includes","originalPush","prototype","push","location","call","catch","err"],"sources":["K:/A_Poj_Test/Vue2/vue2/src/router/index.js"],"sourcesContent":["import Vue from 'vue';\r\nimport VueRouter from 'vue-router';\r\nimport HomeView from '../views/manager/HomeView.vue'; // 确保路径正确\r\nimport LoginView from '@/views/LoginView.vue';\r\nimport RegisterView from '@/views/RegisterView.vue';\r\nimport ManagerView from '@/views/ManagerView.vue';\r\nimport UserView from '@/views/manager/UserView.vue';\r\nimport AuthView from '@/views/manager/AuthView.vue';\r\nimport NullView from '@/views/404View.vue'\r\nimport PresonView from '@/views/manager/PresonView.vue';\r\nVue.use(VueRouter);\r\n\r\nconst routes=[\r\n  {\r\n    path: '/',\r\n    name: 'Manager',\r\n    component: ManagerView,\r\n    redirect:'home',\r\n    children:[\r\n      {path:'home',name:'HomeView',component:HomeView},\r\n      {path:'user',name:'UserView',component:UserView},\r\n      {path: '403',name: 'AuthView',component: AuthView,},\r\n      {path: 'preson',name: 'PresonView',component: PresonView,},\r\n    ]\r\n  },\r\n  {path: '/login',name: 'LoginView',component: LoginView,},\r\n  {path: '/register',name: 'RegisterView',component: RegisterView,},\r\n  {path: '*',name: '404',component: NullView,},\r\n\r\n]\r\nconst router = new VueRouter({\r\n  mode:'history',\r\n  base:process.env.BASE_URL,\r\n  routes\r\n})\r\n\r\nrouter.beforeEach((to,from,next)=>{\r\n  let adminPaths = ['/user']\r\n  let user = JSON.parse(localStorage.getItem('honey-user') || '{}')\r\n\r\n  if (user.role !== '管理员' && adminPaths.includes(to.path)) {\r\n    // 如果当前登录的用户不是管理员，然后当前的到达的路径是管理员才有权限访问的路径，那这个时候我就让用户去到一个没有权限的页面，不让他访问实际的页面\r\n    next('/403')\r\n  } else {\r\n    next()\r\n  }\r\n})\r\nconst originalPush = VueRouter.prototype.push\r\nVueRouter.prototype.push = function push (location) {\r\n  return originalPush.call(this, location).catch(err => err)\r\n}\r\nexport default router"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,QAAQ,MAAM,+BAA+B,CAAC,CAAC;AACtD,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,UAAU,MAAM,gCAAgC;AACvDT,GAAG,CAACU,GAAG,CAACT,SAAS,CAAC;AAElB,MAAMU,MAAM,GAAC,CACX;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAET,WAAW;EACtBU,QAAQ,EAAC,MAAM;EACfC,QAAQ,EAAC,CACP;IAACJ,IAAI,EAAC,MAAM;IAACC,IAAI,EAAC,UAAU;IAACC,SAAS,EAACZ;EAAQ,CAAC,EAChD;IAACU,IAAI,EAAC,MAAM;IAACC,IAAI,EAAC,UAAU;IAACC,SAAS,EAACR;EAAQ,CAAC,EAChD;IAACM,IAAI,EAAE,KAAK;IAACC,IAAI,EAAE,UAAU;IAACC,SAAS,EAAEP;EAAS,CAAC,EACnD;IAACK,IAAI,EAAE,QAAQ;IAACC,IAAI,EAAE,YAAY;IAACC,SAAS,EAAEL;EAAW,CAAC;AAE9D,CAAC,EACD;EAACG,IAAI,EAAE,QAAQ;EAACC,IAAI,EAAE,WAAW;EAACC,SAAS,EAAEX;AAAU,CAAC,EACxD;EAACS,IAAI,EAAE,WAAW;EAACC,IAAI,EAAE,cAAc;EAACC,SAAS,EAAEV;AAAa,CAAC,EACjE;EAACQ,IAAI,EAAE,GAAG;EAACC,IAAI,EAAE,KAAK;EAACC,SAAS,EAAEN;AAAS,CAAC,CAE7C;AACD,MAAMS,MAAM,GAAG,IAAIhB,SAAS,CAAC;EAC3BiB,IAAI,EAAC,SAAS;EACdC,IAAI,EAACC,OAAO,CAACC,GAAG,CAACC,QAAQ;EACzBX;AACF,CAAC,CAAC;AAEFM,MAAM,CAACM,UAAU,CAAC,CAACC,EAAE,EAACC,IAAI,EAACC,IAAI,KAAG;EAChC,IAAIC,UAAU,GAAG,CAAC,OAAO,CAAC;EAC1B,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC;EAEjE,IAAIJ,IAAI,CAACK,IAAI,KAAK,KAAK,IAAIN,UAAU,CAACO,QAAQ,CAACV,EAAE,CAACZ,IAAI,CAAC,EAAE;IACvD;IACAc,IAAI,CAAC,MAAM,CAAC;EACd,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AACF,MAAMS,YAAY,GAAGlC,SAAS,CAACmC,SAAS,CAACC,IAAI;AAC7CpC,SAAS,CAACmC,SAAS,CAACC,IAAI,GAAG,SAASA,IAAIA,CAAEC,QAAQ,EAAE;EAClD,OAAOH,YAAY,CAACI,IAAI,CAAC,IAAI,EAAED,QAAQ,CAAC,CAACE,KAAK,CAACC,GAAG,IAAIA,GAAG,CAAC;AAC5D,CAAC;AACD,eAAexB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}