{"ast":null,"code":"export default {\n  name: \"CoursesView\",\n  data() {\n    return {\n      tableData: [],\n      // 课程数据\n      pageNum: 1,\n      // 当前页码\n      pageSize: 5,\n      // 每页显示的数量\n      course_code: '',\n      // 查询条件：课程代码\n      course_name: '',\n      // 查询条件：课程名称\n      total: 0,\n      // 总课程数\n      enrolledCourses: [],\n      // 已选课程列表\n      user: JSON.parse(localStorage.getItem('honey-user') || '{}') // 用户信息\n    };\n  },\n  created() {\n    this.loadCourses(1); // 初始化加载课程数据\n  },\n  methods: {\n    // 加载课程数据\n    loadCourses(pageNum) {\n      if (pageNum) this.pageNum = pageNum;\n      // 获取所有课程\n      this.$request.get('/courses/selectByPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          course_code: this.course_code,\n          course_name: this.course_name\n        }\n      }).then(res => {\n        console.log('课程接口返回数据:', res);\n        const courses = res.data || [];\n        this.total = res.data.total || 0;\n\n        // 获取已选课程数据\n        this.loadEnrollments().then(() => {\n          // 标记每门课程是否已选\n          this.tableData = courses.map(course => ({\n            ...course,\n            isEnrolled: this.enrolledCourses.some(enrollment => enrollment.course_code === course.course_code)\n          }));\n        });\n      });\n    },\n    // 加载已选课程数据\n    loadEnrollments() {\n      return this.$request.get('/enrollments/selectAll', {\n        params: {\n          student_id: this.user.id\n        }\n      }).then(res => {\n        this.enrolledCourses = res.data || [];\n      });\n    },\n    // 选课逻辑\n    enroll(course) {\n      this.$request.post('/enrollments/selectAll', {\n        student_id: this.user.id,\n        course_code: course.course_code\n      }).then(res => {\n        if (res.code === '200') {\n          this.$message.success('选课成功');\n          this.loadCourses(this.pageNum); // 重新加载课程列表\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    // 取消选课逻辑\n    unenroll(course) {\n      const enrollment = this.enrolledCourses.find(item => item.course_code === course.course_code);\n      if (enrollment) {\n        this.$request.delete(`/enrollments/delete/${enrollment.enrollment_id}`).then(res => {\n          if (res.code === '200') {\n            this.$message.success('取消选课成功');\n            this.loadCourses(this.pageNum); // 重新加载课程列表\n          } else {\n            this.$message.error(res.msg);\n          }\n        });\n      }\n    },\n    // 判断课程是否已经选修\n    isCourseEnrolled(courseCode) {\n      return this.enrolledCourses.some(enrollment => enrollment.course_code === courseCode);\n    },\n    // 重置查询条件\n    reset() {\n      this.course_code = '';\n      this.course_name = '';\n      this.loadCourses(1);\n    },\n    // 分页切换\n    handleCurrentChange(pageNum) {\n      this.loadCourses(pageNum);\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","course_code","course_name","total","enrolledCourses","user","JSON","parse","localStorage","getItem","created","loadCourses","methods","$request","get","params","then","res","console","log","courses","loadEnrollments","map","course","isEnrolled","some","enrollment","student_id","id","enroll","post","code","$message","success","error","msg","unenroll","find","item","delete","enrollment_id","isCourseEnrolled","courseCode","reset","handleCurrentChange"],"sources":["src/views/manager/EnrollmentsView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <!-- 查询部分 -->\r\n        <div>\r\n            <el-input style=\"width: 200px\" placeholder=\"查询课程代码\" v-model=\"course_code\"></el-input>\r\n            <el-input style=\"width: 200px; margin: 0 5px\" placeholder=\"查询课程名称\" v-model=\"course_name\"></el-input>\r\n            <el-button type=\"primary\" @click=\"loadCourses(1)\">查询</el-button>\r\n            <el-button type=\"info\" @click=\"reset\">重置</el-button>\r\n        </div>\r\n        \r\n        <el-table :data=\"tableData\" stripe :header-cell-style=\"{ backgroundColor: 'aliceblue', color: '#666' }\">\r\n            <el-table-column label=\"课程代码\" prop=\"course_code\" align=\"center\"></el-table-column>\r\n            <el-table-column label=\"课程名称\" prop=\"course_name\" align=\"center\"></el-table-column>\r\n            <el-table-column label=\"学分\" prop=\"credits\" align=\"center\"></el-table-column>\r\n            <el-table-column label=\"课程简介\" prop=\"description\" align=\"center\"></el-table-column>\r\n            <el-table-column label=\"学期\" prop=\"semester\" align=\"center\"></el-table-column>\r\n\r\n            <el-table-column label=\"操作\" align=\"center\">\r\n                <template v-slot=\"scope\">\r\n                    <el-button \r\n                        v-if=\"!isCourseEnrolled(scope.row.course_code)\" \r\n                        size=\"mini\" \r\n                        type=\"primary\" \r\n                        plain \r\n                        @click=\"enroll(scope.row)\">\r\n                        选课\r\n                    </el-button>\r\n                    <el-button \r\n                        v-else \r\n                        size=\"mini\" \r\n                        type=\"danger\" \r\n                        plain \r\n                        @click=\"unenroll(scope.row)\">\r\n                        取消选课\r\n                    </el-button>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n\r\n        <div style=\"margin: 10px 0\">\r\n            <el-pagination\r\n                @current-change=\"handleCurrentChange\"\r\n                :current-page=\"pageNum\"\r\n                :page-sizes=\"[5, 10, 20, 50]\"\r\n                :page-size=\"pageSize\"\r\n                layout=\"total, prev, pager, next\"\r\n                :total=\"total\">\r\n            </el-pagination>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \"CoursesView\",\r\n    data() {\r\n        return {\r\n            tableData: [], // 课程数据\r\n            pageNum: 1, // 当前页码\r\n            pageSize: 5, // 每页显示的数量\r\n            course_code: '', // 查询条件：课程代码\r\n            course_name: '', // 查询条件：课程名称\r\n            total: 0, // 总课程数\r\n            enrolledCourses: [], // 已选课程列表\r\n            user: JSON.parse(localStorage.getItem('honey-user') || '{}'), // 用户信息\r\n        };\r\n    },\r\n    created() {\r\n        this.loadCourses(1); // 初始化加载课程数据\r\n    },\r\n    methods: {\r\n        // 加载课程数据\r\n        loadCourses(pageNum) {\r\n            if (pageNum) this.pageNum = pageNum;\r\n            // 获取所有课程\r\n            this.$request.get('/courses/selectByPage', {\r\n                params: {\r\n                    pageNum: this.pageNum,\r\n                    pageSize: this.pageSize,\r\n                    course_code: this.course_code,\r\n                    course_name: this.course_name,\r\n                }\r\n            }).then((res) => {\r\n                console.log('课程接口返回数据:', res);\r\n                const courses = res.data || [];\r\n                this.total = res.data.total || 0;\r\n\r\n                // 获取已选课程数据\r\n                this.loadEnrollments().then(() => {\r\n                    // 标记每门课程是否已选\r\n                    this.tableData = courses.map((course) => ({\r\n                        ...course,\r\n                        isEnrolled: this.enrolledCourses.some(\r\n                            (enrollment) => enrollment.course_code === course.course_code\r\n                        ),\r\n                    }));\r\n                });\r\n            });\r\n        },\r\n\r\n        // 加载已选课程数据\r\n        loadEnrollments() {\r\n            return this.$request.get('/enrollments/selectAll', {\r\n                params: { student_id: this.user.id },\r\n            }).then((res) => {\r\n                this.enrolledCourses = res.data || [];\r\n            });\r\n        },\r\n\r\n        // 选课逻辑\r\n        enroll(course) {\r\n            this.$request.post('/enrollments/selectAll', {\r\n                student_id: this.user.id,\r\n                course_code: course.course_code,\r\n            }).then((res) => {\r\n                if (res.code === '200') {\r\n                    this.$message.success('选课成功');\r\n                    this.loadCourses(this.pageNum); // 重新加载课程列表\r\n                } else {\r\n                    this.$message.error(res.msg);\r\n                }\r\n            });\r\n        },\r\n\r\n        // 取消选课逻辑\r\n        unenroll(course) {\r\n            const enrollment = this.enrolledCourses.find(\r\n                (item) => item.course_code === course.course_code\r\n            );\r\n            if (enrollment) {\r\n                this.$request.delete(`/enrollments/delete/${enrollment.enrollment_id}`).then((res) => {\r\n                    if (res.code === '200') {\r\n                        this.$message.success('取消选课成功');\r\n                        this.loadCourses(this.pageNum); // 重新加载课程列表\r\n                    } else {\r\n                        this.$message.error(res.msg);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        // 判断课程是否已经选修\r\n        isCourseEnrolled(courseCode) {\r\n            return this.enrolledCourses.some((enrollment) => enrollment.course_code === courseCode);\r\n        },\r\n\r\n        // 重置查询条件\r\n        reset() {\r\n            this.course_code = '';\r\n            this.course_name = '';\r\n            this.loadCourses(1);\r\n        },\r\n\r\n        // 分页切换\r\n        handleCurrentChange(pageNum) {\r\n            this.loadCourses(pageNum);\r\n        },\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"],"mappings":"AAsDA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MAAA;MACAC,OAAA;MAAA;MACAC,QAAA;MAAA;MACAC,WAAA;MAAA;MACAC,WAAA;MAAA;MACAC,KAAA;MAAA;MACAC,eAAA;MAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACA;IACAD,YAAAZ,OAAA;MACA,IAAAA,OAAA,OAAAA,OAAA,GAAAA,OAAA;MACA;MACA,KAAAc,QAAA,CAAAC,GAAA;QACAC,MAAA;UACAhB,OAAA,OAAAA,OAAA;UACAC,QAAA,OAAAA,QAAA;UACAC,WAAA,OAAAA,WAAA;UACAC,WAAA,OAAAA;QACA;MACA,GAAAc,IAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,GAAA,cAAAF,GAAA;QACA,MAAAG,OAAA,GAAAH,GAAA,CAAApB,IAAA;QACA,KAAAM,KAAA,GAAAc,GAAA,CAAApB,IAAA,CAAAM,KAAA;;QAEA;QACA,KAAAkB,eAAA,GAAAL,IAAA;UACA;UACA,KAAAlB,SAAA,GAAAsB,OAAA,CAAAE,GAAA,CAAAC,MAAA;YACA,GAAAA,MAAA;YACAC,UAAA,OAAApB,eAAA,CAAAqB,IAAA,CACAC,UAAA,IAAAA,UAAA,CAAAzB,WAAA,KAAAsB,MAAA,CAAAtB,WACA;UACA;QACA;MACA;IACA;IAEA;IACAoB,gBAAA;MACA,YAAAR,QAAA,CAAAC,GAAA;QACAC,MAAA;UAAAY,UAAA,OAAAtB,IAAA,CAAAuB;QAAA;MACA,GAAAZ,IAAA,CAAAC,GAAA;QACA,KAAAb,eAAA,GAAAa,GAAA,CAAApB,IAAA;MACA;IACA;IAEA;IACAgC,OAAAN,MAAA;MACA,KAAAV,QAAA,CAAAiB,IAAA;QACAH,UAAA,OAAAtB,IAAA,CAAAuB,EAAA;QACA3B,WAAA,EAAAsB,MAAA,CAAAtB;MACA,GAAAe,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAc,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACA,KAAAtB,WAAA,MAAAZ,OAAA;QACA;UACA,KAAAiC,QAAA,CAAAE,KAAA,CAAAjB,GAAA,CAAAkB,GAAA;QACA;MACA;IACA;IAEA;IACAC,SAAAb,MAAA;MACA,MAAAG,UAAA,QAAAtB,eAAA,CAAAiC,IAAA,CACAC,IAAA,IAAAA,IAAA,CAAArC,WAAA,KAAAsB,MAAA,CAAAtB,WACA;MACA,IAAAyB,UAAA;QACA,KAAAb,QAAA,CAAA0B,MAAA,wBAAAb,UAAA,CAAAc,aAAA,IAAAxB,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAAc,IAAA;YACA,KAAAC,QAAA,CAAAC,OAAA;YACA,KAAAtB,WAAA,MAAAZ,OAAA;UACA;YACA,KAAAiC,QAAA,CAAAE,KAAA,CAAAjB,GAAA,CAAAkB,GAAA;UACA;QACA;MACA;IACA;IAEA;IACAM,iBAAAC,UAAA;MACA,YAAAtC,eAAA,CAAAqB,IAAA,CAAAC,UAAA,IAAAA,UAAA,CAAAzB,WAAA,KAAAyC,UAAA;IACA;IAEA;IACAC,MAAA;MACA,KAAA1C,WAAA;MACA,KAAAC,WAAA;MACA,KAAAS,WAAA;IACA;IAEA;IACAiC,oBAAA7C,OAAA;MACA,KAAAY,WAAA,CAAAZ,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}