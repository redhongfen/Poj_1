{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.patternLikeCommon = exports.functionTypeAnnotationCommon = exports.functionDeclarationCommon = exports.functionCommon = exports.classMethodOrPropertyCommon = exports.classMethodOrDeclareMethodCommon = void 0;\nvar _is = require(\"../validators/is.js\");\nvar _isValidIdentifier = require(\"../validators/isValidIdentifier.js\");\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\nvar _helperStringParser = require(\"@babel/helper-string-parser\");\nvar _index = require(\"../constants/index.js\");\nvar _utils = require(\"./utils.js\");\nconst defineType = (0, _utils.defineAliasedType)(\"Standardized\");\ndefineType(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: (0, _utils.arrayOf)((0, _utils.assertNodeOrValueType)(\"null\", \"Expression\", \"SpreadElement\")),\n      default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined\n    }\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"]\n});\ndefineType(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)(\"string\") : Object.assign(function () {\n        const identifier = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS);\n        const pattern = (0, _utils.assertOneOf)(\"=\");\n        return function (node, key, val) {\n          const validator = (0, _is.default)(\"Pattern\", node.left) ? pattern : identifier;\n          validator(node, key, val);\n        };\n      }(), {\n        type: \"string\"\n      })\n    },\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)(\"LVal\", \"OptionalMemberExpression\") : (0, _utils.assertNodeType)(\"Identifier\", \"MemberExpression\", \"OptionalMemberExpression\", \"ArrayPattern\", \"ObjectPattern\", \"TSAsExpression\", \"TSSatisfiesExpression\", \"TSTypeAssertion\", \"TSNonNullExpression\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"]\n});\ndefineType(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS)\n    },\n    left: {\n      validate: function () {\n        const expression = (0, _utils.assertNodeType)(\"Expression\");\n        const inOp = (0, _utils.assertNodeType)(\"Expression\", \"PrivateName\");\n        const validator = Object.assign(function (node, key, val) {\n          const validator = node.operator === \"in\" ? inOp : expression;\n          validator(node, key, val);\n        }, {\n          oneOfNodeTypes: [\"Expression\", \"PrivateName\"]\n        });\n        return validator;\n      }()\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"]\n});\ndefineType(\"InterpreterDirective\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertNodeType)(\"DirectiveLiteral\")\n    }\n  }\n});\ndefineType(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: (0, _utils.arrayOfType)(\"Directive\"),\n      default: []\n    },\n    body: (0, _utils.validateArrayOfType)(\"Statement\")\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"]\n});\ndefineType(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\ndefineType(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: Object.assign({\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"Super\", \"V8IntrinsicIdentifier\")\n    },\n    arguments: (0, _utils.validateArrayOfType)(\"Expression\", \"SpreadElement\", \"ArgumentPlaceholder\")\n  }, !process.env.BABEL_TYPES_8_BREAKING ? {\n    optional: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  } : {}, {\n    typeArguments: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\"),\n      optional: true\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  })\n});\ndefineType(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\"]\n});\ndefineType(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    consequent: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    alternate: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\", \"Conditional\"]\n});\ndefineType(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\ndefineType(\"DebuggerStatement\", {\n  aliases: [\"Statement\"]\n});\ndefineType(\"DoWhileStatement\", {\n  builder: [\"test\", \"body\"],\n  visitor: [\"body\", \"test\"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"]\n});\ndefineType(\"EmptyStatement\", {\n  aliases: [\"Statement\"]\n});\ndefineType(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"]\n});\ndefineType(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: (0, _utils.assertNodeType)(\"Program\")\n    },\n    comments: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? Object.assign(() => {}, {\n        each: {\n          oneOfNodeTypes: [\"CommentBlock\", \"CommentLine\"]\n        }\n      }) : (0, _utils.assertEach)((0, _utils.assertNodeType)(\"CommentBlock\", \"CommentLine\")),\n      optional: true\n    },\n    tokens: {\n      validate: (0, _utils.assertEach)(Object.assign(() => {}, {\n        type: \"any\"\n      })),\n      optional: true\n    }\n  }\n});\ndefineType(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)(\"VariableDeclaration\", \"LVal\") : (0, _utils.assertNodeType)(\"VariableDeclaration\", \"Identifier\", \"MemberExpression\", \"ArrayPattern\", \"ObjectPattern\", \"TSAsExpression\", \"TSSatisfiesExpression\", \"TSTypeAssertion\", \"TSNonNullExpression\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  }\n});\ndefineType(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: (0, _utils.assertNodeType)(\"VariableDeclaration\", \"Expression\"),\n      optional: true\n    },\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    update: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  }\n});\nconst functionCommon = () => ({\n  params: (0, _utils.validateArrayOfType)(\"Identifier\", \"Pattern\", \"RestElement\"),\n  generator: {\n    default: false\n  },\n  async: {\n    default: false\n  }\n});\nexports.functionCommon = functionCommon;\nconst functionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  typeParameters: {\n    validate: (0, _utils.assertNodeType)(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true\n  }\n});\nexports.functionTypeAnnotationCommon = functionTypeAnnotationCommon;\nconst functionDeclarationCommon = () => Object.assign({}, functionCommon(), {\n  declare: {\n    validate: (0, _utils.assertValueType)(\"boolean\"),\n    optional: true\n  },\n  id: {\n    validate: (0, _utils.assertNodeType)(\"Identifier\"),\n    optional: true\n  }\n});\nexports.functionDeclarationCommon = functionDeclarationCommon;\ndefineType(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\", \"body\"],\n  fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    },\n    predicate: {\n      validate: (0, _utils.assertNodeType)(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true\n    }\n  }),\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Statement\", \"Pureish\", \"Declaration\"],\n  validate: !process.env.BABEL_TYPES_8_BREAKING ? undefined : function () {\n    const identifier = (0, _utils.assertNodeType)(\"Identifier\");\n    return function (parent, key, node) {\n      if (!(0, _is.default)(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  }()\n});\ndefineType(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\n  fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {\n    id: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    },\n    predicate: {\n      validate: (0, _utils.assertNodeType)(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true\n    }\n  })\n});\nconst patternLikeCommon = () => ({\n  typeAnnotation: {\n    validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n    optional: true\n  },\n  optional: {\n    validate: (0, _utils.assertValueType)(\"boolean\"),\n    optional: true\n  },\n  decorators: {\n    validate: (0, _utils.arrayOfType)(\"Decorator\"),\n    optional: true\n  }\n});\nexports.patternLikeCommon = patternLikeCommon;\ndefineType(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\", \"decorators\"],\n  aliases: [\"Expression\", \"PatternLike\", \"LVal\", \"TSEntityName\"],\n  fields: Object.assign({}, patternLikeCommon(), {\n    name: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), Object.assign(function (node, key, val) {\n        if (!(0, _isValidIdentifier.default)(val, false)) {\n          throw new TypeError(`\"${val}\" is not a valid identifier name`);\n        }\n      }, {\n        type: \"string\"\n      })) : (0, _utils.assertValueType)(\"string\")\n    }\n  }),\n  validate: process.env.BABEL_TYPES_8_BREAKING ? function (parent, key, node) {\n    const match = /\\.(\\w+)$/.exec(key);\n    if (!match) return;\n    const [, parentKey] = match;\n    const nonComp = {\n      computed: false\n    };\n    if (parentKey === \"property\") {\n      if ((0, _is.default)(\"MemberExpression\", parent, nonComp)) return;\n      if ((0, _is.default)(\"OptionalMemberExpression\", parent, nonComp)) return;\n    } else if (parentKey === \"key\") {\n      if ((0, _is.default)(\"Property\", parent, nonComp)) return;\n      if ((0, _is.default)(\"Method\", parent, nonComp)) return;\n    } else if (parentKey === \"exported\") {\n      if ((0, _is.default)(\"ExportSpecifier\", parent)) return;\n    } else if (parentKey === \"imported\") {\n      if ((0, _is.default)(\"ImportSpecifier\", parent, {\n        imported: node\n      })) return;\n    } else if (parentKey === \"meta\") {\n      if ((0, _is.default)(\"MetaProperty\", parent, {\n        meta: node\n      })) return;\n    }\n    if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && node.name !== \"this\") {\n      throw new TypeError(`\"${node.name}\" is not a valid identifier`);\n    }\n  } : undefined\n});\ndefineType(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    consequent: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    },\n    alternate: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  }\n});\ndefineType(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  }\n});\ndefineType(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\ndefineType(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"number\"), Object.assign(function (node, key, val) {\n        if (1 / val < 0 || !Number.isFinite(val)) {\n          const error = new Error(\"NumericLiterals must be non-negative finite numbers. \" + `You can use t.valueToNode(${val}) instead.`);\n          {}\n        }\n      }, {\n        type: \"number\"\n      }))\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\ndefineType(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\ndefineType(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\ndefineType(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Pureish\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    },\n    flags: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), Object.assign(function (node, key, val) {\n        const invalid = /[^gimsuy]/.exec(val);\n        if (invalid) {\n          throw new TypeError(`\"${invalid[0]}\" is not a valid RegExp flag`);\n        }\n      }, {\n        type: \"string\"\n      })) : (0, _utils.assertValueType)(\"string\"),\n      default: \"\"\n    }\n  }\n});\ndefineType(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS)\n    },\n    left: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"MemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"optional\"] : [])],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: Object.assign({\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"Super\")\n    },\n    property: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)(\"Identifier\", \"PrivateName\");\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\n        const validator = function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        validator.oneOfNodeTypes = [\"Expression\", \"Identifier\", \"PrivateName\"];\n        return validator;\n      }()\n    },\n    computed: {\n      default: false\n    }\n  }, !process.env.BABEL_TYPES_8_BREAKING ? {\n    optional: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  } : {})\n});\ndefineType(\"NewExpression\", {\n  inherits: \"CallExpression\"\n});\ndefineType(\"Program\", {\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\", \"sourceType\", \"interpreter\"],\n  fields: {\n    sourceType: {\n      validate: (0, _utils.assertOneOf)(\"script\", \"module\"),\n      default: \"script\"\n    },\n    interpreter: {\n      validate: (0, _utils.assertNodeType)(\"InterpreterDirective\"),\n      default: null,\n      optional: true\n    },\n    directives: {\n      validate: (0, _utils.arrayOfType)(\"Directive\"),\n      default: []\n    },\n    body: (0, _utils.validateArrayOfType)(\"Statement\")\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\"]\n});\ndefineType(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: (0, _utils.validateArrayOfType)(\"ObjectMethod\", \"ObjectProperty\", \"SpreadElement\")\n  }\n});\ndefineType(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"generator\", \"async\"],\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\", \"body\"],\n  fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {\n    kind: Object.assign({\n      validate: (0, _utils.assertOneOf)(\"method\", \"get\", \"set\")\n    }, !process.env.BABEL_TYPES_8_BREAKING ? {\n      default: \"method\"\n    } : {}),\n    computed: {\n      default: false\n    },\n    key: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\", \"BigIntLiteral\");\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\n        const validator = function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        validator.oneOfNodeTypes = [\"Expression\", \"Identifier\", \"StringLiteral\", \"NumericLiteral\", \"BigIntLiteral\"];\n        return validator;\n      }()\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)(\"Decorator\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  }),\n  aliases: [\"UserWhitespacable\", \"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"ObjectMember\"]\n});\ndefineType(\"ObjectProperty\", {\n  builder: [\"key\", \"value\", \"computed\", \"shorthand\", ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"decorators\"] : [])],\n  fields: {\n    computed: {\n      default: false\n    },\n    key: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\", \"BigIntLiteral\", \"DecimalLiteral\", \"PrivateName\");\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\n        const validator = Object.assign(function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        }, {\n          oneOfNodeTypes: [\"Expression\", \"Identifier\", \"StringLiteral\", \"NumericLiteral\", \"BigIntLiteral\", \"DecimalLiteral\", \"PrivateName\"]\n        });\n        return validator;\n      }()\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"PatternLike\")\n    },\n    shorthand: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)(\"boolean\"), Object.assign(function (node, key, shorthand) {\n        if (!shorthand) return;\n        if (node.computed) {\n          throw new TypeError(\"Property shorthand of ObjectProperty cannot be true if computed is true\");\n        }\n        if (!(0, _is.default)(\"Identifier\", node.key)) {\n          throw new TypeError(\"Property shorthand of ObjectProperty cannot be true if key is not an Identifier\");\n        }\n      }, {\n        type: \"boolean\"\n      })) : (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)(\"Decorator\"),\n      optional: true\n    }\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"],\n  validate: !process.env.BABEL_TYPES_8_BREAKING ? undefined : function () {\n    const pattern = (0, _utils.assertNodeType)(\"Identifier\", \"Pattern\", \"TSAsExpression\", \"TSSatisfiesExpression\", \"TSNonNullExpression\", \"TSTypeAssertion\");\n    const expression = (0, _utils.assertNodeType)(\"Expression\");\n    return function (parent, key, node) {\n      const validator = (0, _is.default)(\"ObjectPattern\", parent) ? pattern : expression;\n      validator(node, \"value\", node.value);\n    };\n  }()\n});\ndefineType(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  builder: [\"argument\"],\n  aliases: [\"LVal\", \"PatternLike\"],\n  deprecatedAlias: \"RestProperty\",\n  fields: Object.assign({}, patternLikeCommon(), {\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)(\"LVal\") : (0, _utils.assertNodeType)(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\", \"MemberExpression\", \"TSAsExpression\", \"TSSatisfiesExpression\", \"TSTypeAssertion\", \"TSNonNullExpression\")\n    }\n  }),\n  validate: process.env.BABEL_TYPES_8_BREAKING ? function (parent, key) {\n    const match = /(\\w+)\\[(\\d+)\\]/.exec(key);\n    if (!match) throw new Error(\"Internal Babel error: malformed key.\");\n    const [, listKey, index] = match;\n    if (parent[listKey].length > +index + 1) {\n      throw new TypeError(`RestElement must be last element of ${listKey}`);\n    }\n  } : undefined\n});\ndefineType(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: (0, _utils.validateArrayOfType)(\"Expression\")\n  },\n  aliases: [\"Expression\"]\n});\ndefineType(\"ParenthesizedExpression\", {\n  visitor: [\"expression\"],\n  aliases: [\"Expression\", \"ExpressionWrapper\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    consequent: (0, _utils.validateArrayOfType)(\"Statement\")\n  }\n});\ndefineType(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    cases: (0, _utils.validateArrayOfType)(\"SwitchCase\")\n  }\n});\ndefineType(\"ThisExpression\", {\n  aliases: [\"Expression\"]\n});\ndefineType(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    block: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)(\"BlockStatement\"), Object.assign(function (node) {\n        if (!node.handler && !node.finalizer) {\n          throw new TypeError(\"TryStatement expects either a handler or finalizer, or both\");\n        }\n      }, {\n        oneOfNodeTypes: [\"BlockStatement\"]\n      })) : (0, _utils.assertNodeType)(\"BlockStatement\")\n    },\n    handler: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"CatchClause\")\n    },\n    finalizer: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  }\n});\ndefineType(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true\n    },\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"]\n});\ndefineType(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false\n    },\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)(\"Expression\") : (0, _utils.assertNodeType)(\"Identifier\", \"MemberExpression\")\n    },\n    operator: {\n      validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"]\n});\ndefineType(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    declare: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    kind: {\n      validate: (0, _utils.assertOneOf)(\"var\", \"let\", \"const\", \"using\", \"await using\")\n    },\n    declarations: (0, _utils.validateArrayOfType)(\"VariableDeclarator\")\n  },\n  validate: process.env.BABEL_TYPES_8_BREAKING ? (() => {\n    const withoutInit = (0, _utils.assertNodeType)(\"Identifier\");\n    return function (parent, key, node) {\n      if ((0, _is.default)(\"ForXStatement\", parent, {\n        left: node\n      })) {\n        if (node.declarations.length !== 1) {\n          throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);\n        }\n      } else {\n        node.declarations.forEach(decl => {\n          if (!decl.init) withoutInit(decl, \"id\", decl.id);\n        });\n      }\n    };\n  })() : undefined\n});\ndefineType(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)(\"LVal\") : (0, _utils.assertNodeType)(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\")\n    },\n    definite: {\n      optional: true,\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    },\n    init: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  }\n});\ndefineType(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    }\n  }\n});\ndefineType(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\"],\n  builder: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: Object.assign({}, patternLikeCommon(), {\n    left: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"ObjectPattern\", \"ArrayPattern\", \"MemberExpression\", \"TSAsExpression\", \"TSSatisfiesExpression\", \"TSTypeAssertion\", \"TSNonNullExpression\")\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)(\"Decorator\"),\n      optional: true\n    }\n  })\n});\ndefineType(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: Object.assign({}, patternLikeCommon(), {\n    elements: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)(\"null\", \"PatternLike\", \"LVal\")))\n    }\n  })\n});\ndefineType(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"typeParameters\", \"params\", \"returnType\", \"body\"],\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\n  fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {\n    expression: {\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\", \"Expression\")\n    },\n    predicate: {\n      validate: (0, _utils.assertNodeType)(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true\n    }\n  })\n});\ndefineType(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"ClassMethod\", \"ClassPrivateMethod\", \"ClassProperty\", \"ClassPrivateProperty\", \"ClassAccessorProperty\", \"TSDeclareMethod\", \"TSIndexSignature\", \"StaticBlock\")\n  }\n});\ndefineType(\"ClassExpression\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\"decorators\", \"id\", \"typeParameters\", \"superClass\", \"superTypeParameters\", \"mixins\", \"implements\", \"body\"],\n  aliases: [\"Scopable\", \"Class\", \"Expression\"],\n  fields: {\n    id: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\n      optional: true\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\", \"Noop\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"ClassBody\")\n    },\n    superClass: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    superTypeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n      optional: true\n    },\n    implements: {\n      validate: (0, _utils.arrayOfType)(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)(\"Decorator\"),\n      optional: true\n    },\n    mixins: {\n      validate: (0, _utils.assertNodeType)(\"InterfaceExtends\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"ClassDeclaration\", {\n  inherits: \"ClassExpression\",\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\"),\n      optional: true\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\", \"Noop\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"ClassBody\")\n    },\n    superClass: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    superTypeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n      optional: true\n    },\n    implements: {\n      validate: (0, _utils.arrayOfType)(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)(\"Decorator\"),\n      optional: true\n    },\n    mixins: {\n      validate: (0, _utils.assertNodeType)(\"InterfaceExtends\"),\n      optional: true\n    },\n    declare: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    abstract: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  },\n  validate: !process.env.BABEL_TYPES_8_BREAKING ? undefined : function () {\n    const identifier = (0, _utils.assertNodeType)(\"Identifier\");\n    return function (parent, key, node) {\n      if (!(0, _is.default)(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  }()\n});\ndefineType(\"ExportAllDeclaration\", {\n  builder: [\"source\"],\n  visitor: [\"source\", \"attributes\", \"assertions\"],\n  aliases: [\"Statement\", \"Declaration\", \"ImportOrExportDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    source: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\")\n    },\n    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\"type\", \"value\")),\n    attributes: {\n      optional: true,\n      validate: (0, _utils.arrayOfType)(\"ImportAttribute\")\n    },\n    assertions: {\n      deprecated: true,\n      optional: true,\n      validate: (0, _utils.arrayOfType)(\"ImportAttribute\")\n    }\n  }\n});\ndefineType(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\"Statement\", \"Declaration\", \"ImportOrExportDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    declaration: (0, _utils.validateType)(\"TSDeclareFunction\", \"FunctionDeclaration\", \"ClassDeclaration\", \"Expression\"),\n    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\"value\"))\n  }\n});\ndefineType(\"ExportNamedDeclaration\", {\n  builder: [\"declaration\", \"specifiers\", \"source\"],\n  visitor: process.env ? [\"declaration\", \"specifiers\", \"source\", \"attributes\"] : [\"declaration\", \"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\"Statement\", \"Declaration\", \"ImportOrExportDeclaration\", \"ExportDeclaration\"],\n  fields: {\n    declaration: {\n      optional: true,\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)(\"Declaration\"), Object.assign(function (node, key, val) {\n        if (val && node.specifiers.length) {\n          throw new TypeError(\"Only declaration or specifiers is allowed on ExportNamedDeclaration\");\n        }\n        if (val && node.source) {\n          throw new TypeError(\"Cannot export a declaration from a source\");\n        }\n      }, {\n        oneOfNodeTypes: [\"Declaration\"]\n      })) : (0, _utils.assertNodeType)(\"Declaration\")\n    },\n    attributes: {\n      optional: true,\n      validate: (0, _utils.arrayOfType)(\"ImportAttribute\")\n    },\n    assertions: {\n      deprecated: true,\n      optional: true,\n      validate: (0, _utils.arrayOfType)(\"ImportAttribute\")\n    },\n    specifiers: {\n      default: [],\n      validate: (0, _utils.arrayOf)(function () {\n        const sourced = (0, _utils.assertNodeType)(\"ExportSpecifier\", \"ExportDefaultSpecifier\", \"ExportNamespaceSpecifier\");\n        const sourceless = (0, _utils.assertNodeType)(\"ExportSpecifier\");\n        if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;\n        return Object.assign(function (node, key, val) {\n          const validator = node.source ? sourced : sourceless;\n          validator(node, key, val);\n        }, {\n          oneOfNodeTypes: [\"ExportSpecifier\", \"ExportDefaultSpecifier\", \"ExportNamespaceSpecifier\"]\n        });\n      }())\n    },\n    source: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\"),\n      optional: true\n    },\n    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\"type\", \"value\"))\n  }\n});\ndefineType(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\")\n    },\n    exportKind: {\n      validate: (0, _utils.assertOneOf)(\"type\", \"value\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  builder: [\"left\", \"right\", \"body\", \"await\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return (0, _utils.assertNodeType)(\"VariableDeclaration\", \"LVal\");\n        }\n        const declaration = (0, _utils.assertNodeType)(\"VariableDeclaration\");\n        const lval = (0, _utils.assertNodeType)(\"Identifier\", \"MemberExpression\", \"ArrayPattern\", \"ObjectPattern\", \"TSAsExpression\", \"TSSatisfiesExpression\", \"TSTypeAssertion\", \"TSNonNullExpression\");\n        return Object.assign(function (node, key, val) {\n          if ((0, _is.default)(\"VariableDeclaration\", val)) {\n            declaration(node, key, val);\n          } else {\n            lval(node, key, val);\n          }\n        }, {\n          oneOfNodeTypes: [\"VariableDeclaration\", \"Identifier\", \"MemberExpression\", \"ArrayPattern\", \"ObjectPattern\", \"TSAsExpression\", \"TSSatisfiesExpression\", \"TSTypeAssertion\", \"TSNonNullExpression\"]\n        });\n      }()\n    },\n    right: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Statement\")\n    },\n    await: {\n      default: false\n    }\n  }\n});\ndefineType(\"ImportDeclaration\", {\n  builder: [\"specifiers\", \"source\"],\n  visitor: [\"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\"Statement\", \"Declaration\", \"ImportOrExportDeclaration\"],\n  fields: {\n    attributes: {\n      optional: true,\n      validate: (0, _utils.arrayOfType)(\"ImportAttribute\")\n    },\n    assertions: {\n      deprecated: true,\n      optional: true,\n      validate: (0, _utils.arrayOfType)(\"ImportAttribute\")\n    },\n    module: {\n      optional: true,\n      validate: (0, _utils.assertValueType)(\"boolean\")\n    },\n    phase: {\n      default: null,\n      validate: (0, _utils.assertOneOf)(\"source\", \"defer\")\n    },\n    specifiers: (0, _utils.validateArrayOfType)(\"ImportSpecifier\", \"ImportDefaultSpecifier\", \"ImportNamespaceSpecifier\"),\n    source: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\")\n    },\n    importKind: {\n      validate: (0, _utils.assertOneOf)(\"type\", \"typeof\", \"value\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\ndefineType(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\ndefineType(\"ImportSpecifier\", {\n  visitor: [\"imported\", \"local\"],\n  builder: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    imported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\")\n    },\n    importKind: {\n      validate: (0, _utils.assertOneOf)(\"type\", \"typeof\", \"value\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"ImportExpression\", {\n  visitor: [\"source\", \"options\"],\n  aliases: [\"Expression\"],\n  fields: {\n    phase: {\n      default: null,\n      validate: (0, _utils.assertOneOf)(\"source\", \"defer\")\n    },\n    source: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    options: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertNodeType)(\"Identifier\"), Object.assign(function (node, key, val) {\n        let property;\n        switch (val.name) {\n          case \"function\":\n            property = \"sent\";\n            break;\n          case \"new\":\n            property = \"target\";\n            break;\n          case \"import\":\n            property = \"meta\";\n            break;\n        }\n        if (!(0, _is.default)(\"Identifier\", node.property, {\n          name: property\n        })) {\n          throw new TypeError(\"Unrecognised MetaProperty\");\n        }\n      }, {\n        oneOfNodeTypes: [\"Identifier\"]\n      })) : (0, _utils.assertNodeType)(\"Identifier\")\n    },\n    property: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\nconst classMethodOrPropertyCommon = () => ({\n  abstract: {\n    validate: (0, _utils.assertValueType)(\"boolean\"),\n    optional: true\n  },\n  accessibility: {\n    validate: (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\"),\n    optional: true\n  },\n  static: {\n    default: false\n  },\n  override: {\n    default: false\n  },\n  computed: {\n    default: false\n  },\n  optional: {\n    validate: (0, _utils.assertValueType)(\"boolean\"),\n    optional: true\n  },\n  key: {\n    validate: (0, _utils.chain)(function () {\n      const normal = (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\", \"BigIntLiteral\");\n      const computed = (0, _utils.assertNodeType)(\"Expression\");\n      return function (node, key, val) {\n        const validator = node.computed ? computed : normal;\n        validator(node, key, val);\n      };\n    }(), (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\", \"BigIntLiteral\", \"Expression\"))\n  }\n});\nexports.classMethodOrPropertyCommon = classMethodOrPropertyCommon;\nconst classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), {\n  params: (0, _utils.validateArrayOfType)(\"Identifier\", \"Pattern\", \"RestElement\", \"TSParameterProperty\"),\n  kind: {\n    validate: (0, _utils.assertOneOf)(\"get\", \"set\", \"method\", \"constructor\"),\n    default: \"method\"\n  },\n  access: {\n    validate: (0, _utils.chain)((0, _utils.assertValueType)(\"string\"), (0, _utils.assertOneOf)(\"public\", \"private\", \"protected\")),\n    optional: true\n  },\n  decorators: {\n    validate: (0, _utils.arrayOfType)(\"Decorator\"),\n    optional: true\n  }\n});\nexports.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;\ndefineType(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"static\", \"generator\", \"async\"],\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\", \"body\"],\n  fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  })\n});\ndefineType(\"ObjectPattern\", {\n  visitor: [\"properties\", \"typeAnnotation\", \"decorators\"],\n  builder: [\"properties\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: Object.assign({}, patternLikeCommon(), {\n    properties: (0, _utils.validateArrayOfType)(\"RestElement\", \"ObjectProperty\")\n  })\n});\ndefineType(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"Super\", {\n  aliases: [\"Expression\"]\n});\ndefineType(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"typeParameters\", \"quasi\"],\n  builder: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    quasi: {\n      validate: (0, _utils.assertNodeType)(\"TemplateLiteral\")\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      validate: (0, _utils.chain)((0, _utils.assertShape)({\n        raw: {\n          validate: (0, _utils.assertValueType)(\"string\")\n        },\n        cooked: {\n          validate: (0, _utils.assertValueType)(\"string\"),\n          optional: true\n        }\n      }), function templateElementCookedValidator(node) {\n        const raw = node.value.raw;\n        let unterminatedCalled = false;\n        const error = () => {\n          throw new Error(\"Internal @babel/types error.\");\n        };\n        const {\n          str,\n          firstInvalidLoc\n        } = (0, _helperStringParser.readStringContents)(\"template\", raw, 0, 0, 0, {\n          unterminated() {\n            unterminatedCalled = true;\n          },\n          strictNumericEscape: error,\n          invalidEscapeSequence: error,\n          numericSeparatorInEscapeSequence: error,\n          unexpectedNumericSeparator: error,\n          invalidDigit: error,\n          invalidCodePoint: error\n        });\n        if (!unterminatedCalled) throw new Error(\"Invalid raw\");\n        node.value.cooked = firstInvalidLoc ? null : str;\n      })\n    },\n    tail: {\n      default: false\n    }\n  }\n});\ndefineType(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: (0, _utils.validateArrayOfType)(\"TemplateElement\"),\n    expressions: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\", \"TSType\")), function (node, key, val) {\n        if (node.quasis.length !== val.length + 1) {\n          throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.\\nExpected ${val.length + 1} quasis but got ${node.quasis.length}`);\n        }\n      })\n    }\n  }\n});\ndefineType(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)(\"boolean\"), Object.assign(function (node, key, val) {\n        if (val && !node.argument) {\n          throw new TypeError(\"Property delegate of YieldExpression cannot be true if there is no argument\");\n        }\n      }, {\n        type: \"boolean\"\n      })) : (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    },\n    argument: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"Import\", {\n  aliases: [\"Expression\"]\n});\ndefineType(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\ndefineType(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\ndefineType(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    property: {\n      validate: function () {\n        const normal = (0, _utils.assertNodeType)(\"Identifier\");\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\n        const validator = Object.assign(function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        }, {\n          oneOfNodeTypes: [\"Expression\", \"Identifier\"]\n        });\n        return validator;\n      }()\n    },\n    computed: {\n      default: false\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)(\"boolean\") : (0, _utils.chain)((0, _utils.assertValueType)(\"boolean\"), (0, _utils.assertOptionalChainStart)())\n    }\n  }\n});\ndefineType(\"OptionalCallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    arguments: (0, _utils.validateArrayOfType)(\"Expression\", \"SpreadElement\", \"ArgumentPlaceholder\"),\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)(\"boolean\") : (0, _utils.chain)((0, _utils.assertValueType)(\"boolean\"), (0, _utils.assertOptionalChainStart)())\n    },\n    typeArguments: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\"),\n      optional: true\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"ClassProperty\", {\n  visitor: [\"decorators\", \"key\", \"typeAnnotation\", \"value\"],\n  builder: [\"key\", \"value\", \"typeAnnotation\", \"decorators\", \"computed\", \"static\"],\n  aliases: [\"Property\"],\n  fields: Object.assign({}, classMethodOrPropertyCommon(), {\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    definite: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)(\"Decorator\"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    declare: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    variance: {\n      validate: (0, _utils.assertNodeType)(\"Variance\"),\n      optional: true\n    }\n  })\n});\ndefineType(\"ClassAccessorProperty\", {\n  visitor: [\"decorators\", \"key\", \"typeAnnotation\", \"value\"],\n  builder: [\"key\", \"value\", \"typeAnnotation\", \"decorators\", \"computed\", \"static\"],\n  aliases: [\"Property\", \"Accessor\"],\n  fields: Object.assign({}, classMethodOrPropertyCommon(), {\n    key: {\n      validate: (0, _utils.chain)(function () {\n        const normal = (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\", \"BigIntLiteral\", \"PrivateName\");\n        const computed = (0, _utils.assertNodeType)(\"Expression\");\n        return function (node, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      }(), (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\", \"NumericLiteral\", \"BigIntLiteral\", \"Expression\", \"PrivateName\"))\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    definite: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)(\"Decorator\"),\n      optional: true\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    declare: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    variance: {\n      validate: (0, _utils.assertNodeType)(\"Variance\"),\n      optional: true\n    }\n  })\n});\ndefineType(\"ClassPrivateProperty\", {\n  visitor: [\"decorators\", \"key\", \"typeAnnotation\", \"value\"],\n  builder: [\"key\", \"value\", \"decorators\", \"static\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"PrivateName\")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    typeAnnotation: {\n      validate: (0, _utils.assertNodeType)(\"TypeAnnotation\", \"TSTypeAnnotation\", \"Noop\"),\n      optional: true\n    },\n    decorators: {\n      validate: (0, _utils.arrayOfType)(\"Decorator\"),\n      optional: true\n    },\n    static: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    },\n    readonly: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    definite: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    },\n    variance: {\n      validate: (0, _utils.assertNodeType)(\"Variance\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\", \"body\"],\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"Private\"],\n  fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {\n    kind: {\n      validate: (0, _utils.assertOneOf)(\"get\", \"set\", \"method\"),\n      default: \"method\"\n    },\n    key: {\n      validate: (0, _utils.assertNodeType)(\"PrivateName\")\n    },\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    }\n  })\n});\ndefineType(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\ndefineType(\"StaticBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: (0, _utils.validateArrayOfType)(\"Statement\")\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"FunctionParent\"]\n});","map":{"version":3,"names":["_is","require","_isValidIdentifier","_helperValidatorIdentifier","_helperStringParser","_index","_utils","defineType","defineAliasedType","fields","elements","validate","arrayOf","assertNodeOrValueType","default","process","env","BABEL_TYPES_8_BREAKING","undefined","visitor","aliases","operator","assertValueType","Object","assign","identifier","assertOneOf","ASSIGNMENT_OPERATORS","pattern","node","key","val","validator","left","type","assertNodeType","right","builder","BINARY_OPERATORS","expression","inOp","oneOfNodeTypes","value","directives","arrayOfType","body","validateArrayOfType","label","optional","callee","arguments","typeArguments","typeParameters","param","test","consequent","alternate","program","comments","each","assertEach","tokens","init","update","functionCommon","params","generator","async","exports","functionTypeAnnotationCommon","returnType","functionDeclarationCommon","declare","id","predicate","parent","inherits","patternLikeCommon","typeAnnotation","decorators","name","chain","TypeError","match","exec","parentKey","nonComp","computed","imported","meta","isKeyword","isReservedWord","deprecatedAlias","Number","isFinite","error","Error","flags","invalid","LOGICAL_OPERATORS","object","property","normal","sourceType","interpreter","properties","kind","shorthand","argument","listKey","index","length","expressions","discriminant","cases","block","handler","finalizer","prefix","UNARY_OPERATORS","UPDATE_OPERATORS","declarations","withoutInit","forEach","decl","definite","superClass","superTypeParameters","implements","mixins","abstract","source","exportKind","validateOptional","attributes","assertions","deprecated","declaration","validateType","specifiers","sourced","sourceless","local","exported","lval","await","module","phase","importKind","options","classMethodOrPropertyCommon","accessibility","static","override","classMethodOrDeclareMethodCommon","access","tag","quasi","assertShape","raw","cooked","templateElementCookedValidator","unterminatedCalled","str","firstInvalidLoc","readStringContents","unterminated","strictNumericEscape","invalidEscapeSequence","numericSeparatorInEscapeSequence","unexpectedNumericSeparator","invalidDigit","invalidCodePoint","tail","quasis","delegate","assertOptionalChainStart","readonly","variance"],"sources":["../../src/definitions/core.ts"],"sourcesContent":["import is from \"../validators/is.ts\";\nimport isValidIdentifier from \"../validators/isValidIdentifier.ts\";\nimport { isKeyword, isReservedWord } from \"@babel/helper-validator-identifier\";\nimport type * as t from \"../index.ts\";\nimport { readStringContents } from \"@babel/helper-string-parser\";\n\nimport {\n  BINARY_OPERATORS,\n  LOGICAL_OPERATORS,\n  ASSIGNMENT_OPERATORS,\n  UNARY_OPERATORS,\n  UPDATE_OPERATORS,\n} from \"../constants/index.ts\";\n\nimport {\n  defineAliasedType,\n  assertShape,\n  assertOptionalChainStart,\n  assertValueType,\n  assertNodeType,\n  assertNodeOrValueType,\n  assertEach,\n  chain,\n  assertOneOf,\n  validateOptional,\n  type Validator,\n  arrayOf,\n  arrayOfType,\n  validateArrayOfType,\n  validateType,\n} from \"./utils.ts\";\n\nconst defineType = defineAliasedType(\"Standardized\");\n\ndefineType(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: arrayOf(\n        assertNodeOrValueType(\"null\", \"Expression\", \"SpreadElement\"),\n      ),\n      default:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? []\n          : undefined,\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertValueType(\"string\")\n          : Object.assign(\n              (function () {\n                const identifier = assertOneOf(...ASSIGNMENT_OPERATORS);\n                const pattern = assertOneOf(\"=\");\n\n                return function (node: t.AssignmentExpression, key, val) {\n                  const validator = is(\"Pattern\", node.left)\n                    ? pattern\n                    : identifier;\n                  validator(node, key, val);\n                } as Validator;\n              })(),\n              { type: \"string\" },\n            ),\n    },\n    left: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertNodeType(\"LVal\", \"OptionalMemberExpression\")\n          : assertNodeType(\n              \"Identifier\",\n              \"MemberExpression\",\n              \"OptionalMemberExpression\",\n              \"ArrayPattern\",\n              \"ObjectPattern\",\n              \"TSAsExpression\",\n              \"TSSatisfiesExpression\",\n              \"TSTypeAssertion\",\n              \"TSNonNullExpression\",\n            ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...BINARY_OPERATORS),\n    },\n    left: {\n      validate: (function () {\n        const expression = assertNodeType(\"Expression\");\n        const inOp = assertNodeType(\"Expression\", \"PrivateName\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.BinaryExpression, key, val) {\n            const validator = node.operator === \"in\" ? inOp : expression;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `operator` property\n          { oneOfNodeTypes: [\"Expression\", \"PrivateName\"] },\n        );\n        return validator;\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n});\n\ndefineType(\"InterpreterDirective\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: assertNodeType(\"DirectiveLiteral\"),\n    },\n  },\n});\n\ndefineType(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: arrayOfType(\"Directive\"),\n      default: [],\n    },\n    body: validateArrayOfType(\"Statement\"),\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"],\n});\n\ndefineType(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\", \"Super\", \"V8IntrinsicIdentifier\"),\n    },\n    arguments: validateArrayOfType(\n      \"Expression\",\n      \"SpreadElement\",\n      \"ArgumentPlaceholder\",\n    ),\n    ...(!process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n        }\n      : {}),\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: assertNodeType(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\"],\n});\n\ndefineType(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    alternate: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\", \"Conditional\"],\n});\n\ndefineType(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"DebuggerStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"DoWhileStatement\", {\n  builder: [\"test\", \"body\"],\n  visitor: [\"body\", \"test\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n});\n\ndefineType(\"EmptyStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"],\n});\n\ndefineType(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: assertNodeType(\"Program\"),\n    },\n    comments: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? Object.assign(() => {}, {\n              each: { oneOfNodeTypes: [\"CommentBlock\", \"CommentLine\"] },\n            })\n          : assertEach(assertNodeType(\"CommentBlock\", \"CommentLine\")),\n      optional: true,\n    },\n    tokens: {\n      // todo(ts): add Token type\n      validate: assertEach(Object.assign(() => {}, { type: \"any\" })),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertNodeType(\"VariableDeclaration\", \"LVal\")\n          : assertNodeType(\n              \"VariableDeclaration\",\n              \"Identifier\",\n              \"MemberExpression\",\n              \"ArrayPattern\",\n              \"ObjectPattern\",\n              \"TSAsExpression\",\n              \"TSSatisfiesExpression\",\n              \"TSTypeAssertion\",\n              \"TSNonNullExpression\",\n            ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: assertNodeType(\"VariableDeclaration\", \"Expression\"),\n      optional: true,\n    },\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    update: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\nexport const functionCommon = () => ({\n  params: validateArrayOfType(\"Identifier\", \"Pattern\", \"RestElement\"),\n  generator: {\n    default: false,\n  },\n  async: {\n    default: false,\n  },\n});\n\nexport const functionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\")\n      : assertNodeType(\n          \"TypeParameterDeclaration\",\n          \"TSTypeParameterDeclaration\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n});\n\nexport const functionDeclarationCommon = () => ({\n  ...functionCommon(),\n  declare: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  id: {\n    validate: assertNodeType(\"Identifier\"),\n    optional: true, // May be null for `export default function`\n  },\n});\n\ndefineType(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\", \"body\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Statement\",\n    \"Pureish\",\n    \"Declaration\",\n  ],\n  validate:\n    !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? undefined\n      : (function () {\n          const identifier = assertNodeType(\"Identifier\");\n\n          return function (parent, key, node) {\n            if (!is(\"ExportDefaultDeclaration\", parent)) {\n              identifier(node, \"id\", node.id);\n            }\n          };\n        })(),\n});\n\ndefineType(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\nexport const patternLikeCommon = () => ({\n  typeAnnotation: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  decorators: {\n    validate: arrayOfType(\"Decorator\"),\n    optional: true,\n  },\n});\n\ndefineType(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\", \"decorators\" /* for legacy param decorators */],\n  aliases: [\"Expression\", \"PatternLike\", \"LVal\", \"TSEntityName\"],\n  fields: {\n    ...patternLikeCommon(),\n    name: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertValueType(\"string\"),\n              Object.assign(\n                function (node, key, val) {\n                  if (!isValidIdentifier(val, false)) {\n                    throw new TypeError(\n                      `\"${val}\" is not a valid identifier name`,\n                    );\n                  }\n                } as Validator,\n                { type: \"string\" },\n              ),\n            )\n          : assertValueType(\"string\"),\n    },\n  },\n  validate:\n    process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n      ? function (parent, key, node) {\n          const match = /\\.(\\w+)$/.exec(key);\n          if (!match) return;\n\n          const [, parentKey] = match;\n          const nonComp = { computed: false };\n\n          // We can't check if `parent.property === node`, because nodes are validated\n          // before replacing them in the AST.\n          if (parentKey === \"property\") {\n            if (is(\"MemberExpression\", parent, nonComp)) return;\n            if (is(\"OptionalMemberExpression\", parent, nonComp)) return;\n          } else if (parentKey === \"key\") {\n            if (is(\"Property\", parent, nonComp)) return;\n            if (is(\"Method\", parent, nonComp)) return;\n          } else if (parentKey === \"exported\") {\n            if (is(\"ExportSpecifier\", parent)) return;\n          } else if (parentKey === \"imported\") {\n            if (is(\"ImportSpecifier\", parent, { imported: node })) return;\n          } else if (parentKey === \"meta\") {\n            if (is(\"MetaProperty\", parent, { meta: node })) return;\n          }\n\n          if (\n            // Ideally we should call isStrictReservedWord if this node is a descendant\n            // of a block in strict mode. Also, we should pass the inModule option so\n            // we can disable \"await\" in module.\n            (isKeyword(node.name) || isReservedWord(node.name, false)) &&\n            // Even if \"this\" is a keyword, we are using the Identifier\n            // node to represent it.\n            node.name !== \"this\"\n          ) {\n            throw new TypeError(`\"${node.name}\" is not a valid identifier`);\n          }\n        }\n      : undefined,\n});\n\ndefineType(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    alternate: {\n      optional: true,\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: chain(\n        assertValueType(\"number\"),\n        Object.assign(\n          function (node, key, val) {\n            if (1 / val < 0 || !Number.isFinite(val)) {\n              const error = new Error(\n                \"NumericLiterals must be non-negative finite numbers. \" +\n                  `You can use t.valueToNode(${val}) instead.`,\n              );\n              if (process.env.BABEL_8_BREAKING) {\n                // TODO(@nicolo-ribaudo) Fix regenerator to not pass negative\n                // numbers here.\n                if (!IS_STANDALONE) {\n                  if (!new Error().stack.includes(\"regenerator\")) {\n                    throw error;\n                  }\n                }\n              } else {\n                // TODO: Enable this warning once regenerator is fixed.\n                // https://github.com/facebook/regenerator/pull/680\n                // console.warn(error);\n              }\n            }\n          } satisfies Validator,\n          { type: \"number\" },\n        ),\n      ),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"boolean\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Pureish\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: assertValueType(\"string\"),\n    },\n    flags: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertValueType(\"string\"),\n              Object.assign(\n                function (node, key, val) {\n                  const invalid = /[^gimsuy]/.exec(val);\n                  if (invalid) {\n                    throw new TypeError(\n                      `\"${invalid[0]}\" is not a valid RegExp flag`,\n                    );\n                  }\n                } as Validator,\n                { type: \"string\" },\n              ),\n            )\n          : assertValueType(\"string\"),\n      default: \"\",\n    },\n  },\n});\n\ndefineType(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...LOGICAL_OPERATORS),\n    },\n    left: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"MemberExpression\", {\n  builder: [\n    \"object\",\n    \"property\",\n    \"computed\",\n    ...(!process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? [\"optional\"]\n      : []),\n  ],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\", \"Super\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\", \"PrivateName\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (\n          node: t.MemberExpression,\n          key,\n          val,\n        ) {\n          const validator: Validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\"Expression\", \"Identifier\", \"PrivateName\"];\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    ...(!process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n        }\n      : {}),\n  },\n});\n\ndefineType(\"NewExpression\", { inherits: \"CallExpression\" });\n\ndefineType(\"Program\", {\n  // Note: We explicitly leave 'interpreter' out here because it is\n  // conceptually comment-like, and Babel does not traverse comments either.\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\", \"sourceType\", \"interpreter\"],\n  fields: {\n    sourceType: {\n      validate: assertOneOf(\"script\", \"module\"),\n      default: \"script\",\n    },\n    interpreter: {\n      validate: assertNodeType(\"InterpreterDirective\"),\n      default: null,\n      optional: true,\n    },\n    directives: {\n      validate: arrayOfType(\"Directive\"),\n      default: [],\n    },\n    body: validateArrayOfType(\"Statement\"),\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\"],\n});\n\ndefineType(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: validateArrayOfType(\n      \"ObjectMethod\",\n      \"ObjectProperty\",\n      \"SpreadElement\",\n    ),\n  },\n});\n\ndefineType(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"generator\", \"async\"],\n  visitor: [\n    \"decorators\",\n    \"key\",\n    \"typeParameters\",\n    \"params\",\n    \"returnType\",\n    \"body\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n      ...(!process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n        ? { default: \"method\" }\n        : {}),\n    },\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (node: t.ObjectMethod, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\n          \"Expression\",\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        ];\n        return validator;\n      })(),\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  aliases: [\n    \"UserWhitespacable\",\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"ObjectMember\",\n  ],\n});\n\ndefineType(\"ObjectProperty\", {\n  builder: [\n    \"key\",\n    \"value\",\n    \"computed\",\n    \"shorthand\",\n    ...(!process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? [\"decorators\"]\n      : []),\n  ],\n  fields: {\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = process.env.BABEL_8_BREAKING\n          ? assertNodeType(\n              \"Identifier\",\n              \"StringLiteral\",\n              \"NumericLiteral\",\n              \"BigIntLiteral\",\n              \"PrivateName\",\n            )\n          : assertNodeType(\n              \"Identifier\",\n              \"StringLiteral\",\n              \"NumericLiteral\",\n              \"BigIntLiteral\",\n              // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n              \"DecimalLiteral\",\n              \"PrivateName\",\n            );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          {\n            // todo(ts): can be discriminated union by `computed` property\n            oneOfNodeTypes: process.env.BABEL_8_BREAKING\n              ? [\n                  \"Expression\",\n                  \"Identifier\",\n                  \"StringLiteral\",\n                  \"NumericLiteral\",\n                  \"BigIntLiteral\",\n                  \"PrivateName\",\n                ]\n              : [\n                  \"Expression\",\n                  \"Identifier\",\n                  \"StringLiteral\",\n                  \"NumericLiteral\",\n                  \"BigIntLiteral\",\n                  \"DecimalLiteral\",\n                  \"PrivateName\",\n                ],\n          },\n        );\n        return validator;\n      })(),\n    },\n    value: {\n      // Value may be PatternLike if this is an AssignmentProperty\n      // https://github.com/babel/babylon/issues/434\n      validate: assertNodeType(\"Expression\", \"PatternLike\"),\n    },\n    shorthand: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertValueType(\"boolean\"),\n              Object.assign(\n                function (node: t.ObjectProperty, key, shorthand) {\n                  if (!shorthand) return;\n\n                  if (node.computed) {\n                    throw new TypeError(\n                      \"Property shorthand of ObjectProperty cannot be true if computed is true\",\n                    );\n                  }\n\n                  if (!is(\"Identifier\", node.key)) {\n                    throw new TypeError(\n                      \"Property shorthand of ObjectProperty cannot be true if key is not an Identifier\",\n                    );\n                  }\n                } as Validator,\n                { type: \"boolean\" },\n              ),\n            )\n          : assertValueType(\"boolean\"),\n      default: false,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"],\n  validate:\n    !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? undefined\n      : (function () {\n          const pattern = assertNodeType(\n            \"Identifier\",\n            \"Pattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSNonNullExpression\",\n            \"TSTypeAssertion\",\n          );\n          const expression = assertNodeType(\"Expression\");\n\n          return function (parent, key, node) {\n            const validator = is(\"ObjectPattern\", parent)\n              ? pattern\n              : expression;\n            validator(node, \"value\", node.value);\n          };\n        })(),\n});\n\ndefineType(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  builder: [\"argument\"],\n  aliases: [\"LVal\", \"PatternLike\"],\n  deprecatedAlias: \"RestProperty\",\n  fields: {\n    ...patternLikeCommon(),\n    argument: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertNodeType(\"LVal\")\n          : assertNodeType(\n              \"Identifier\",\n              \"ArrayPattern\",\n              \"ObjectPattern\",\n              \"MemberExpression\",\n              \"TSAsExpression\",\n              \"TSSatisfiesExpression\",\n              \"TSTypeAssertion\",\n              \"TSNonNullExpression\",\n            ),\n    },\n  },\n  validate:\n    process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n      ? function (parent: t.ArrayPattern | t.ObjectPattern, key) {\n          const match = /(\\w+)\\[(\\d+)\\]/.exec(key);\n          if (!match) throw new Error(\"Internal Babel error: malformed key.\");\n\n          const [, listKey, index] = match as unknown as [\n            string,\n            keyof typeof parent,\n            string,\n          ];\n          if ((parent[listKey] as t.Node[]).length > +index + 1) {\n            throw new TypeError(\n              `RestElement must be last element of ${listKey}`,\n            );\n          }\n        }\n      : undefined,\n});\n\ndefineType(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: validateArrayOfType(\"Expression\"),\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ParenthesizedExpression\", {\n  visitor: [\"expression\"],\n  aliases: [\"Expression\", \"ExpressionWrapper\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    consequent: validateArrayOfType(\"Statement\"),\n  },\n});\n\ndefineType(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    cases: validateArrayOfType(\"SwitchCase\"),\n  },\n});\n\ndefineType(\"ThisExpression\", {\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    block: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertNodeType(\"BlockStatement\"),\n              Object.assign(\n                function (node: t.TryStatement) {\n                  // This validator isn't put at the top level because we can run it\n                  // even if this node doesn't have a parent.\n\n                  if (!node.handler && !node.finalizer) {\n                    throw new TypeError(\n                      \"TryStatement expects either a handler or finalizer, or both\",\n                    );\n                  }\n                } as Validator,\n                { oneOfNodeTypes: [\"BlockStatement\"] },\n              ),\n            )\n          : assertNodeType(\"BlockStatement\"),\n    },\n    handler: {\n      optional: true,\n      validate: assertNodeType(\"CatchClause\"),\n    },\n    finalizer: {\n      optional: true,\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true,\n    },\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UNARY_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"],\n});\n\ndefineType(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false,\n    },\n    argument: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertNodeType(\"Expression\")\n          : assertNodeType(\"Identifier\", \"MemberExpression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UPDATE_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    kind: {\n      validate: assertOneOf(\n        \"var\",\n        \"let\",\n        \"const\",\n        // https://github.com/tc39/proposal-explicit-resource-management\n        \"using\",\n        // https://github.com/tc39/proposal-async-explicit-resource-management\n        \"await using\",\n      ),\n    },\n    declarations: validateArrayOfType(\"VariableDeclarator\"),\n  },\n  validate:\n    process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n      ? (() => {\n          const withoutInit = assertNodeType(\"Identifier\");\n\n          return function (parent, key, node: t.VariableDeclaration) {\n            if (is(\"ForXStatement\", parent, { left: node })) {\n              if (node.declarations.length !== 1) {\n                throw new TypeError(\n                  `Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`,\n                );\n              }\n            } else {\n              node.declarations.forEach(decl => {\n                if (!decl.init) withoutInit(decl, \"id\", decl.id);\n              });\n            }\n          };\n        })()\n      : undefined,\n});\n\ndefineType(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertNodeType(\"LVal\")\n          : assertNodeType(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\"),\n    },\n    definite: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    init: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\n// --- ES2015 ---\ndefineType(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\" /* for legacy param decorators */],\n  builder: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    left: {\n      validate: assertNodeType(\n        \"Identifier\",\n        \"ObjectPattern\",\n        \"ArrayPattern\",\n        \"MemberExpression\",\n        \"TSAsExpression\",\n        \"TSSatisfiesExpression\",\n        \"TSTypeAssertion\",\n        \"TSNonNullExpression\",\n      ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    // For TypeScript\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeOrValueType(\"null\", \"PatternLike\", \"LVal\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"typeParameters\", \"params\", \"returnType\", \"body\"],\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    expression: {\n      // https://github.com/babel/babylon/issues/505\n      validate: assertValueType(\"boolean\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\", \"Expression\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\n      \"ClassMethod\",\n      \"ClassPrivateMethod\",\n      \"ClassProperty\",\n      \"ClassPrivateProperty\",\n      \"ClassAccessorProperty\",\n      \"TSDeclareMethod\",\n      \"TSIndexSignature\",\n      \"StaticBlock\",\n    ),\n  },\n});\n\ndefineType(\"ClassExpression\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\n    \"decorators\",\n    \"id\",\n    \"typeParameters\",\n    \"superClass\",\n    \"superTypeParameters\",\n    \"mixins\",\n    \"implements\",\n    \"body\",\n  ],\n  aliases: [\"Scopable\", \"Class\", \"Expression\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: arrayOfType(\n        // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        process.env.BABEL_8_BREAKING\n          ? \"TSClassImplements\"\n          : \"TSExpressionWithTypeArguments\",\n        \"ClassImplements\",\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassDeclaration\", {\n  inherits: \"ClassExpression\",\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      // The id may be omitted if this is the child of an\n      // ExportDefaultDeclaration.\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: arrayOfType(\n        // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        process.env.BABEL_8_BREAKING\n          ? \"TSClassImplements\"\n          : \"TSExpressionWithTypeArguments\",\n        \"ClassImplements\",\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    abstract: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n  validate:\n    !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n      ? undefined\n      : (function () {\n          const identifier = assertNodeType(\"Identifier\");\n          return function (parent, key, node) {\n            if (!is(\"ExportDefaultDeclaration\", parent)) {\n              identifier(node, \"id\", node.id);\n            }\n          };\n        })(),\n});\n\ndefineType(\"ExportAllDeclaration\", {\n  builder: [\"source\"],\n  visitor: [\"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n    attributes: {\n      optional: true,\n      validate: arrayOfType(\"ImportAttribute\"),\n    },\n    assertions: {\n      deprecated: true,\n      optional: true,\n      validate: arrayOfType(\"ImportAttribute\"),\n    },\n  },\n});\n\ndefineType(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: validateType(\n      \"TSDeclareFunction\",\n      \"FunctionDeclaration\",\n      \"ClassDeclaration\",\n      \"Expression\",\n    ),\n    exportKind: validateOptional(assertOneOf(\"value\")),\n  },\n});\n\ndefineType(\"ExportNamedDeclaration\", {\n  builder: [\"declaration\", \"specifiers\", \"source\"],\n  visitor: process.env\n    ? [\"declaration\", \"specifiers\", \"source\", \"attributes\"]\n    : [\"declaration\", \"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      optional: true,\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertNodeType(\"Declaration\"),\n              Object.assign(\n                function (node: t.ExportNamedDeclaration, key, val) {\n                  // This validator isn't put at the top level because we can run it\n                  // even if this node doesn't have a parent.\n\n                  if (val && node.specifiers.length) {\n                    throw new TypeError(\n                      \"Only declaration or specifiers is allowed on ExportNamedDeclaration\",\n                    );\n                  }\n\n                  // This validator isn't put at the top level because we can run it\n                  // even if this node doesn't have a parent.\n\n                  if (val && node.source) {\n                    throw new TypeError(\n                      \"Cannot export a declaration from a source\",\n                    );\n                  }\n                } as Validator,\n                { oneOfNodeTypes: [\"Declaration\"] },\n              ),\n            )\n          : assertNodeType(\"Declaration\"),\n    },\n    attributes: {\n      optional: true,\n      validate: arrayOfType(\"ImportAttribute\"),\n    },\n    assertions: {\n      deprecated: true,\n      optional: true,\n      validate: arrayOfType(\"ImportAttribute\"),\n    },\n    specifiers: {\n      default: [],\n      validate: arrayOf(\n        (function () {\n          const sourced = assertNodeType(\n            \"ExportSpecifier\",\n            \"ExportDefaultSpecifier\",\n            \"ExportNamespaceSpecifier\",\n          );\n          const sourceless = assertNodeType(\"ExportSpecifier\");\n\n          if (\n            !process.env.BABEL_8_BREAKING &&\n            !process.env.BABEL_TYPES_8_BREAKING\n          )\n            return sourced;\n\n          return Object.assign(\n            function (node: t.ExportNamedDeclaration, key, val) {\n              const validator = node.source ? sourced : sourceless;\n              validator(node, key, val);\n            } as Validator,\n            {\n              oneOfNodeTypes: [\n                \"ExportSpecifier\",\n                \"ExportDefaultSpecifier\",\n                \"ExportNamespaceSpecifier\",\n              ],\n            },\n          );\n        })(),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n      optional: true,\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    exported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    exportKind: {\n      // And TypeScript's \"export { type foo } from\"\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  builder: [\"left\", \"right\", \"body\", \"await\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: (function () {\n        if (\n          !process.env.BABEL_8_BREAKING &&\n          !process.env.BABEL_TYPES_8_BREAKING\n        ) {\n          return assertNodeType(\"VariableDeclaration\", \"LVal\");\n        }\n\n        const declaration = assertNodeType(\"VariableDeclaration\");\n        const lval = assertNodeType(\n          \"Identifier\",\n          \"MemberExpression\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n          \"TSAsExpression\",\n          \"TSSatisfiesExpression\",\n          \"TSTypeAssertion\",\n          \"TSNonNullExpression\",\n        );\n\n        return Object.assign(\n          function (node, key, val) {\n            if (is(\"VariableDeclaration\", val)) {\n              declaration(node, key, val);\n            } else {\n              lval(node, key, val);\n            }\n          } as Validator,\n          {\n            oneOfNodeTypes: [\n              \"VariableDeclaration\",\n              \"Identifier\",\n              \"MemberExpression\",\n              \"ArrayPattern\",\n              \"ObjectPattern\",\n              \"TSAsExpression\",\n              \"TSSatisfiesExpression\",\n              \"TSTypeAssertion\",\n              \"TSNonNullExpression\",\n            ],\n          },\n        );\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    await: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ImportDeclaration\", {\n  builder: [\"specifiers\", \"source\"],\n  visitor: process.env.BABEL_8_BREAKING\n    ? [\"specifiers\", \"source\", \"attributes\"]\n    : [\"specifiers\", \"source\", \"attributes\", \"assertions\"],\n  aliases: [\"Statement\", \"Declaration\", \"ImportOrExportDeclaration\"],\n  fields: {\n    attributes: {\n      optional: true,\n      validate: arrayOfType(\"ImportAttribute\"),\n    },\n    assertions: {\n      deprecated: true,\n      optional: true,\n      validate: arrayOfType(\"ImportAttribute\"),\n    },\n    module: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    specifiers: validateArrayOfType(\n      \"ImportSpecifier\",\n      \"ImportDefaultSpecifier\",\n      \"ImportNamespaceSpecifier\",\n    ),\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    importKind: {\n      // Handle TypeScript/Flowtype's extension \"import type foo from\"\n      // TypeScript doesn't support typeof\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportSpecifier\", {\n  visitor: [\"imported\", \"local\"],\n  builder: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    imported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    importKind: {\n      // Handle Flowtype's extension \"import {typeof foo} from\"\n      // And TypeScript's \"import { type foo } from\"\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportExpression\", {\n  visitor: [\"source\", \"options\"],\n  aliases: [\"Expression\"],\n  fields: {\n    phase: {\n      default: null,\n      validate: assertOneOf(\"source\", \"defer\"),\n    },\n    source: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    options: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertNodeType(\"Identifier\"),\n              Object.assign(\n                function (node: t.MetaProperty, key, val) {\n                  let property;\n                  switch (val.name) {\n                    case \"function\":\n                      property = \"sent\";\n                      break;\n                    case \"new\":\n                      property = \"target\";\n                      break;\n                    case \"import\":\n                      property = \"meta\";\n                      break;\n                  }\n                  if (!is(\"Identifier\", node.property, { name: property })) {\n                    throw new TypeError(\"Unrecognised MetaProperty\");\n                  }\n                } as Validator,\n                { oneOfNodeTypes: [\"Identifier\"] },\n              ),\n            )\n          : assertNodeType(\"Identifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\nexport const classMethodOrPropertyCommon = () => ({\n  abstract: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  accessibility: {\n    validate: assertOneOf(\"public\", \"private\", \"protected\"),\n    optional: true,\n  },\n  static: {\n    default: false,\n  },\n  override: {\n    default: false,\n  },\n  computed: {\n    default: false,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  key: {\n    validate: chain(\n      (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        return function (node: any, key: string, val: any) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n      assertNodeType(\n        \"Identifier\",\n        \"StringLiteral\",\n        \"NumericLiteral\",\n        \"BigIntLiteral\",\n        \"Expression\",\n      ),\n    ),\n  },\n});\n\nexport const classMethodOrDeclareMethodCommon = () => ({\n  ...functionCommon(),\n  ...classMethodOrPropertyCommon(),\n  params: validateArrayOfType(\n    \"Identifier\",\n    \"Pattern\",\n    \"RestElement\",\n    \"TSParameterProperty\",\n  ),\n  kind: {\n    validate: assertOneOf(\"get\", \"set\", \"method\", \"constructor\"),\n    default: \"method\",\n  },\n  access: {\n    validate: chain(\n      assertValueType(\"string\"),\n      assertOneOf(\"public\", \"private\", \"protected\"),\n    ),\n    optional: true,\n  },\n  decorators: {\n    validate: arrayOfType(\"Decorator\"),\n    optional: true,\n  },\n});\n\ndefineType(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\n    \"kind\",\n    \"key\",\n    \"params\",\n    \"body\",\n    \"computed\",\n    \"static\",\n    \"generator\",\n    \"async\",\n  ],\n  visitor: [\n    \"decorators\",\n    \"key\",\n    \"typeParameters\",\n    \"params\",\n    \"returnType\",\n    \"body\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"ObjectPattern\", {\n  visitor: [\n    \"properties\",\n    \"typeAnnotation\",\n    \"decorators\" /* for legacy param decorators */,\n  ],\n  builder: [\"properties\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    properties: validateArrayOfType(\"RestElement\", \"ObjectProperty\"),\n  },\n});\n\ndefineType(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\n  \"Super\",\n  process.env.BABEL_8_BREAKING\n    ? undefined\n    : {\n        aliases: [\"Expression\"],\n      },\n);\n\ndefineType(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"typeParameters\", \"quasi\"],\n  builder: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    quasi: {\n      validate: assertNodeType(\"TemplateLiteral\"),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      validate: chain(\n        assertShape({\n          raw: {\n            validate: assertValueType(\"string\"),\n          },\n          cooked: {\n            validate: assertValueType(\"string\"),\n            optional: true,\n          },\n        }),\n        function templateElementCookedValidator(node: t.TemplateElement) {\n          const raw = node.value.raw;\n\n          let unterminatedCalled = false;\n\n          const error = () => {\n            // unreachable\n            throw new Error(\"Internal @babel/types error.\");\n          };\n          const { str, firstInvalidLoc } = readStringContents(\n            \"template\",\n            raw,\n            0,\n            0,\n            0,\n            {\n              unterminated() {\n                unterminatedCalled = true;\n              },\n              strictNumericEscape: error,\n              invalidEscapeSequence: error,\n              numericSeparatorInEscapeSequence: error,\n              unexpectedNumericSeparator: error,\n              invalidDigit: error,\n              invalidCodePoint: error,\n            },\n          );\n          if (!unterminatedCalled) throw new Error(\"Invalid raw\");\n\n          node.value.cooked = firstInvalidLoc ? null : str;\n        },\n      ),\n    },\n    tail: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: validateArrayOfType(\"TemplateElement\"),\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            // For TypeScript template literal types\n            \"TSType\",\n          ),\n        ),\n        function (node: t.TemplateLiteral, key, val) {\n          if (node.quasis.length !== val.length + 1) {\n            throw new TypeError(\n              `Number of ${\n                node.type\n              } quasis should be exactly one more than the number of expressions.\\nExpected ${\n                val.length + 1\n              } quasis but got ${node.quasis.length}`,\n            );\n          }\n        } as Validator,\n      ),\n    },\n  },\n});\n\ndefineType(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate:\n        process.env.BABEL_8_BREAKING || process.env.BABEL_TYPES_8_BREAKING\n          ? chain(\n              assertValueType(\"boolean\"),\n              Object.assign(\n                function (node: t.YieldExpression, key, val) {\n                  if (val && !node.argument) {\n                    throw new TypeError(\n                      \"Property delegate of YieldExpression cannot be true if there is no argument\",\n                    );\n                  }\n                } as Validator,\n                { type: \"boolean\" },\n              ),\n            )\n          : assertValueType(\"boolean\"),\n      default: false,\n    },\n    argument: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2017 ---\ndefineType(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2019 ---\ndefineType(\"Import\", {\n  aliases: [\"Expression\"],\n});\n\n// --- ES2020 ---\ndefineType(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.OptionalMemberExpression, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `computed` property\n          { oneOfNodeTypes: [\"Expression\", \"Identifier\"] },\n        );\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    optional: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertValueType(\"boolean\")\n          : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n  },\n});\n\ndefineType(\"OptionalCallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    arguments: validateArrayOfType(\n      \"Expression\",\n      \"SpreadElement\",\n      \"ArgumentPlaceholder\",\n    ),\n    optional: {\n      validate:\n        !process.env.BABEL_8_BREAKING && !process.env.BABEL_TYPES_8_BREAKING\n          ? assertValueType(\"boolean\")\n          : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\n// --- ES2022 ---\ndefineType(\"ClassProperty\", {\n  visitor: [\"decorators\", \"key\", \"typeAnnotation\", \"value\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassAccessorProperty\", {\n  visitor: [\"decorators\", \"key\", \"typeAnnotation\", \"value\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\", \"Accessor\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    key: {\n      validate: chain(\n        (function () {\n          const normal = assertNodeType(\n            \"Identifier\",\n            \"StringLiteral\",\n            \"NumericLiteral\",\n            \"BigIntLiteral\",\n            \"PrivateName\",\n          );\n          const computed = assertNodeType(\"Expression\");\n\n          return function (node: any, key: string, val: any) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          };\n        })(),\n        assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"Expression\",\n          \"PrivateName\",\n        ),\n      ),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateProperty\", {\n  visitor: [\"decorators\", \"key\", \"typeAnnotation\", \"value\"],\n  builder: [\"key\", \"value\", \"decorators\", \"static\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: arrayOfType(\"Decorator\"),\n      optional: true,\n    },\n    static: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\n    \"decorators\",\n    \"key\",\n    \"typeParameters\",\n    \"params\",\n    \"returnType\",\n    \"body\",\n  ],\n  aliases: [\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"Private\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\", \"method\"),\n      default: \"method\",\n    },\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"StaticBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"Statement\"),\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"FunctionParent\"],\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}