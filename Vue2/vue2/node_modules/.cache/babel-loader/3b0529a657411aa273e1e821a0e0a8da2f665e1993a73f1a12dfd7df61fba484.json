{"ast":null,"code":"export default {\n  name: \"SummaryView\",\n  data() {\n    return {\n      tableData: [],\n      // 原始数据\n      filteredTableData: [],\n      // 筛选或排序后的数据\n      pageNum: 1,\n      // 当前页码\n      pageSize: 5,\n      // 每页显示的个数\n      course_code: '',\n      // 查询条件：课程代码\n      student_id: '',\n      // 查询条件：学生学号\n      total: 0,\n      // 总数据条数\n      fromVisible: false,\n      form: {},\n      user: JSON.parse(localStorage.getItem('honey-user') || '{}'),\n      ids: []\n    };\n  },\n  mounted() {\n    this.load();\n  },\n  methods: {\n    // 加载数据\n    load(pageNum) {\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/grades/selectByPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          course_code: this.course_code,\n          student_id: this.student_id\n        }\n      }).then(res => {\n        this.tableData = res.data.list;\n        this.filteredTableData = [...this.tableData]; // 初始化筛选数据\n        this.total = res.data.total;\n      });\n    },\n    // 重置查询条件\n    reset() {\n      this.course_code = '';\n      this.student_id = '';\n      this.load();\n    },\n    // 分页切换\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    },\n    // 按分数降序排序\n    sortScoresDescending() {\n      this.filteredTableData.sort((a, b) => b.score - a.score);\n    },\n    // 按分数升序排序\n    sortScoresAscending() {\n      this.filteredTableData.sort((a, b) => a.score - b.score);\n    },\n    // 筛选分数低于 60 的学生\n    filterLowScores() {\n      this.filteredTableData = this.tableData.filter(item => item.score < 60);\n    },\n    // 重置筛选和排序\n    resetFilter() {\n      this.filteredTableData = [...this.tableData];\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","filteredTableData","pageNum","pageSize","course_code","student_id","total","fromVisible","form","user","JSON","parse","localStorage","getItem","ids","mounted","load","methods","$request","get","params","then","res","list","reset","handleCurrentChange","sortScoresDescending","sort","a","b","score","sortScoresAscending","filterLowScores","filter","item","resetFilter"],"sources":["src/views/manager/SummaryView.vue"],"sourcesContent":["<template>\r\n    <div class=\"\">\r\n        <!-- 查询部分 -->\r\n        <div>\r\n            <el-input style=\"width: 200px\" placeholder=\"查询课程代码\" v-model=\"course_code\"></el-input>\r\n            <el-input style=\"width: 200px; margin: 0 5px\" placeholder=\"查询学生学号\" v-model=\"student_id\"></el-input>\r\n            <el-button type=\"primary\" @click=\"load(1)\">查询</el-button>\r\n            <el-button type=\"info\" @click=\"reset\">重置</el-button>\r\n        </div>\r\n\r\n        <div style=\"margin: 10px 0\">\r\n            <!-- 添加排序和筛选按钮 -->\r\n            <el-button type=\"primary\" @click=\"sortScoresDescending\">按分数降序排序</el-button>\r\n            <el-button type=\"primary\" @click=\"sortScoresAscending\">按分数升序排序</el-button>\r\n            <el-button type=\"warning\" @click=\"filterLowScores\">显示分数低于 60 的学生</el-button>\r\n            <el-button type=\"info\" @click=\"resetFilter\">重置筛选</el-button>\r\n        </div>\r\n\r\n        <!-- 数据表 -->\r\n        <el-table :data=\"filteredTableData\" stripe :header-cell-style=\"{ backgroundColor: 'aliceblue', color: '#666' }\">\r\n            <el-table-column label=\"课程代码\" prop=\"course_code\" align=\"center\"></el-table-column>\r\n            <el-table-column label=\"分数\" prop=\"score\" align=\"center\"></el-table-column>\r\n            <el-table-column label=\"学生学号\" prop=\"student_id\" align=\"center\"></el-table-column>\r\n        </el-table>\r\n\r\n        <div style=\"margin: 10px 0\">\r\n            <el-pagination\r\n                @current-change=\"handleCurrentChange\"\r\n                :current-page=\"pageNum\"\r\n                :page-sizes=\"[5, 10, 20, 50]\"\r\n                :page-size=\"pageSize\"\r\n                layout=\"total, prev, pager, next\"\r\n                :total=\"total\">\r\n            </el-pagination>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n    name: \"SummaryView\",\r\n    data() {\r\n        return {\r\n            tableData: [], // 原始数据\r\n            filteredTableData: [], // 筛选或排序后的数据\r\n            pageNum: 1,   // 当前页码\r\n            pageSize: 5,  // 每页显示的个数\r\n            course_code: '', // 查询条件：课程代码\r\n            student_id: '', // 查询条件：学生学号\r\n            total: 0, // 总数据条数\r\n            fromVisible: false,\r\n            form: {},\r\n            user: JSON.parse(localStorage.getItem('honey-user') || '{}'),\r\n            ids: []\r\n        };\r\n    },\r\n    mounted() {\r\n        this.load();\r\n    },\r\n    methods: {\r\n        // 加载数据\r\n        load(pageNum) {\r\n            if (pageNum) this.pageNum = pageNum;\r\n            this.$request.get('/grades/selectByPage', {\r\n                params: {\r\n                    pageNum: this.pageNum,\r\n                    pageSize: this.pageSize,\r\n                    course_code: this.course_code,\r\n                    student_id: this.student_id,\r\n                }\r\n            }).then(res => {\r\n                this.tableData = res.data.list;\r\n                this.filteredTableData = [...this.tableData]; // 初始化筛选数据\r\n                this.total = res.data.total;\r\n            });\r\n        },\r\n\r\n        // 重置查询条件\r\n        reset() {\r\n            this.course_code = '';\r\n            this.student_id = '';\r\n            this.load();\r\n        },\r\n\r\n        // 分页切换\r\n        handleCurrentChange(pageNum) {\r\n            this.load(pageNum);\r\n        },\r\n\r\n        // 按分数降序排序\r\n        sortScoresDescending() {\r\n            this.filteredTableData.sort((a, b) => b.score - a.score);\r\n        },\r\n\r\n        // 按分数升序排序\r\n        sortScoresAscending() {\r\n            this.filteredTableData.sort((a, b) => a.score - b.score);\r\n        },\r\n\r\n        // 筛选分数低于 60 的学生\r\n        filterLowScores() {\r\n            this.filteredTableData = this.tableData.filter(item => item.score < 60);\r\n        },\r\n\r\n        // 重置筛选和排序\r\n        resetFilter() {\r\n            this.filteredTableData = [...this.tableData];\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"],"mappings":"AAuCA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MAAA;MACAC,iBAAA;MAAA;MACAC,OAAA;MAAA;MACAC,QAAA;MAAA;MACAC,WAAA;MAAA;MACAC,UAAA;MAAA;MACAC,KAAA;MAAA;MACAC,WAAA;MACAC,IAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,GAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,IAAA;EACA;EACAC,OAAA;IACA;IACAD,KAAAd,OAAA;MACA,IAAAA,OAAA,OAAAA,OAAA,GAAAA,OAAA;MACA,KAAAgB,QAAA,CAAAC,GAAA;QACAC,MAAA;UACAlB,OAAA,OAAAA,OAAA;UACAC,QAAA,OAAAA,QAAA;UACAC,WAAA,OAAAA,WAAA;UACAC,UAAA,OAAAA;QACA;MACA,GAAAgB,IAAA,CAAAC,GAAA;QACA,KAAAtB,SAAA,GAAAsB,GAAA,CAAAvB,IAAA,CAAAwB,IAAA;QACA,KAAAtB,iBAAA,YAAAD,SAAA;QACA,KAAAM,KAAA,GAAAgB,GAAA,CAAAvB,IAAA,CAAAO,KAAA;MACA;IACA;IAEA;IACAkB,MAAA;MACA,KAAApB,WAAA;MACA,KAAAC,UAAA;MACA,KAAAW,IAAA;IACA;IAEA;IACAS,oBAAAvB,OAAA;MACA,KAAAc,IAAA,CAAAd,OAAA;IACA;IAEA;IACAwB,qBAAA;MACA,KAAAzB,iBAAA,CAAA0B,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAA,CAAA,CAAAC,KAAA,GAAAF,CAAA,CAAAE,KAAA;IACA;IAEA;IACAC,oBAAA;MACA,KAAA9B,iBAAA,CAAA0B,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAD,CAAA,CAAAE,KAAA,GAAAD,CAAA,CAAAC,KAAA;IACA;IAEA;IACAE,gBAAA;MACA,KAAA/B,iBAAA,QAAAD,SAAA,CAAAiC,MAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAJ,KAAA;IACA;IAEA;IACAK,YAAA;MACA,KAAAlC,iBAAA,YAAAD,SAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}